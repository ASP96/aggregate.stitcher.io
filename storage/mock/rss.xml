<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.stitcher.io/rss</id>
    <link href="https://www.stitcher.io/rss"/>
    <title><![CDATA[ stitcher.io ]]></title>
    <updated>2018-12-06T06:02:26+00:00</updated>
        <entry>
        <title><![CDATA[ New in PHP 7.3 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/new-in-php-73"/>

        <id>https://www.stitcher.io/blog/new-in-php-73</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>PHP 7.3 is expected to be released on <a href='https://wiki.php.net/todo/php73' target='_blank' rel='noreferrer noopener'>December 6, 2018</a>.</p>
<h2><code>is_countable</code> <small><a href='https://wiki.php.net/rfc/is-countable' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>PHP 7.2 added a warning when counting uncountable objects.
The <code>is_countable</code> function can help prevent this warning.</p>
<pre class="language-php"><code class="language-php">$count = is_countable($variable) ? count($variable) : null;</code></pre>
<h2><code>array_key_first</code> and <code>array_key_last</code> <small><a href='https://wiki.php.net/rfc/array_key_first_last' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>These two functions basically do what the name says.</p>
<pre class="language-php"><code class="language-php">$array = [
    'a' =&gt; '…',
    'b' =&gt; '…',
    'c' =&gt; '…',
];

array_key_first($array); // 'a'
array_key_last($array); // 'c'</code></pre>
<p>The original RFC also proposed <code>array_value_first</code> and <code>array_value_last</code>,
but these were voted against by the majority of people. </p>
<p>Another idea for <code>array_first</code> and <code>array_last</code> was proposed which would return a tuple <code>[$key =&gt; $value]</code>,
but opinions were mixed.
For now we only have two functions to get the first and last key of an array. </p>
<h2>Flexible Heredoc syntax <small><a href='https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>Heredoc can be a useful tool for larger strings, though they had a indentation quirck in the past.</p>
<pre class="language-php"><code class="language-php">// Instead of this:

$query = &lt;&lt;&lt;SQL
SELECT * 
FROM `table`
WHERE `column` = true;
SQL;

// You can do this:

$query = &lt;&lt;&lt;SQL
    SELECT * 
    FROM `table`
    WHERE `column` = true;
    SQL;</code></pre>
<p>This is especially useful when you're using Heredoc in an already nested context.</p>
<p>The whitespaces in front of the closing marker will be ignored on all lines.</p>
<p>An important note: because of this change, some existing Heredocs might break,
when they are using the same closing marker in their body.</p>
<pre class="language-php"><code class="language-php">$str = &lt;&lt;&lt;FOO
abcdefg
    FOO
FOO;

// Parse error: Invalid body indentation level in PHP 7.3</code></pre>
<h2>Trailing commas in function calls <small><a href='https://wiki.php.net/rfc/trailing-comma-function-calls' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>What was already possible with arrays, can now also be done with function calls.
Note that it's not possible in function definitions!</p>
<pre class="language-php"><code class="language-php">$compacted = compact(
    'posts',
    'units',
);</code></pre>
<h2>Better type error reporting</h2>
<p><code>TypeErrors</code> for integers and booleans used to print out their full name,
it has been changed to <code>int</code> and <code>bool</code>, to match the type hints in the code.</p>
<pre class="language-txt"><code class="language-txt">Argument 1 passed to foo() must be of the type int/bool</code></pre>
<p>In comparison to PHP 7.2:</p>
<pre class="language-txt"><code class="language-txt">Argument 1 passed to foo() must be of the type 
integer/boolean</code></pre>
<h2>JSON errors can be thrown <small><a href='https://wiki.php.net/rfc/json_throw_on_error' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>Previously, JSON parse errors were a hassle to debug.
The JSON functions now accept an extra option to make them throw an exception on parsing errors.
This change obviously adds a new exception: <code>JsonException</code>.</p>
<pre class="language-php"><code class="language-php">json_encode($data, JSON_THROW_ON_ERROR);

json_decode("invalid json", null, 512, JSON_THROW_ON_ERROR);

// Throws JsonException</code></pre>
<p>While this feature is only available with the newly added option,
there's a chance it'll be the default behaviour in a future version.</p>
<h2><code>list</code> reference assignment <small><a href='https://wiki.php.net/rfc/list_reference_assignment' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>The <code>list()</code> and its shorthand <code>[]</code> syntax now support references.</p>
<pre class="language-php"><code class="language-php">$array = [1, 2];

list($a, &amp;$b) = $array;

$b = 3;

// $array = [1, 3];</code></pre>
<h2>Undefined variables in <code>compact</code> <small><a href='https://wiki.php.net/rfc/compact' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>Undefined variables passed to <code>compact</code> will be reported with a notice, they were previously ignored.</p>
<pre class="language-php"><code class="language-php">$a = 'foo';

compact('a', 'b'); 

// Notice: compact(): Undefined variable: b</code></pre>
<h2>Case-insensitive constants <small><a href='https://wiki.php.net/rfc/case_insensitive_constant_deprecation' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>There were a few edge cases were case-insensitive constants were allowed.
These have been deprecated.</p>
<h2>Same site cookie <small><a href='https://wiki.php.net/rfc/same-site-cookie' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>This change not only adds a new parameter,
it also changes to way the <code>setcookie</code>, <code>setrawcookie</code> and <code>session_set_cookie_params</code> functions work in a non-breaking manner.</p>
<p>Instead of one more parameter added to already huge functions, they now support an array of options, whilst still being backwards compatible.
An example:</p>
<pre><code>bool setcookie(
    string $name 
    [, string $value = "" 
    [, int $expire = 0 
    [, string $path = "" 
    [, string $domain = "" 
    [, bool $secure = false 
    [, bool $httponly = false ]]]]]] 
)

bool setcookie ( 
    string $name 
    [, string $value = "" 
    [, int $expire = 0 
    [, array $options ]]] 
)

// Both ways work.</code></pre>
<h2>PCRE2 migration <small><a href='https://wiki.php.net/rfc/pcre2-migration' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>PCRE —&thinsp;short for &quot;Perl Compatible Regular Expressions&quot;&thinsp;— has been updated to v2.</p>
<p>The migration had a focus on maximum backwards compatibility, though there are a few breaking changes.
Be sure to read the <a href='https://wiki.php.net/rfc/pcre2-migration' target='_blank' rel='noreferrer noopener'>RFC</a> to know about them.</p>
<h2>MBString updates <small><a href='https://github.com/php/php-src/blob/php-7.3.0RC6/UPGRADING#L186-L232' target='_blank' rel='noreferrer noopener'>README</a></small></h2>
<p><code>MBString</code> is PHP's way of <a href='http://php.net/manual/en/intro.mbstring.php' target='_blank' rel='noreferrer noopener'>handling complex strings</a>.
This module has received some updates in this version of PHP.
You can read about it <a href='https://github.com/php/php-src/blob/php-7.3.0RC6/UPGRADING#L186-L232' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<h2>Several deprecations <small><a href='https://wiki.php.net/rfc/deprecations_php_7_3' target='_blank' rel='noreferrer noopener'>rfc</a></small></h2>
<p>Several small things have been deprecated, there's a possibility errors can show up in your code because of this.</p>
<ul>
<li>Undocumented <code>mbstring</code> function aliases</li>
<li>String search functions with integer needle</li>
<li><code>fgetss()</code> function and <code>string.strip_tags</code> filter</li>
<li>Defining a free-standing <code>assert()</code> function</li>
<li><code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags</li>
<li><code>pdo_odbc.db2_instance_name</code> php.ini directive</li>
</ul>
<p>Please refer to the <a href='https://wiki.php.net/rfc/deprecations_php_7_3' target='_blank' rel='noreferrer noopener'>RFC</a> for a full explanation of each deprecation.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-12-05T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Share a blog: codingwriter.com ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-codingwriter-com"/>

        <id>https://www.stitcher.io/blog/share-a-blog-codingwriter-com</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>When asking on Twitter for writing advice, I was suggested to check out <a href='https://twitter.com/codingwriter' target='_blank' rel='noreferrer noopener'>Sarah Mischinger's</a> blog:
<a href='https://codingwriter.com/' target='_blank' rel='noreferrer noopener'>codingwriter.com</a>.
This is a great blog to follow for the technical bloggers out there, myself included.</p>
<p>To me, blogging is more than just shouting my opinion in some corner of the web;
I hope people may learn, the same way I do, by reading other people's blogs.
Writing good content is essential, and I was happy to discover a blog focused on this exact topic.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-11-14T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Structuring unstructured data ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/structuring-unstructured-data"/>

        <id>https://www.stitcher.io/blog/structuring-unstructured-data</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <h2>Have you ever…</h2>
<p>…worked with an array in PHP that was actually more than just an array?
Did you use the array keys as fields?
And did you feel the pain of not knowing exactly what was in that array?
Not being sure whether the data in it is actually what you expect it to be,
or what fields are available?</p>
<p>Let's visualise what I'm talking about:</p>
<pre class="language-php"><code class="language-php">$line = // Get a line from a CSV file

import($line['id'], $line['name'], $line['amount']);</code></pre>
<p>Another example: what about validated request data?</p>
<pre class="language-php"><code class="language-php">function store(PostRequest $request, Post $post) 
{
    $data = $request-&gt;validated();

    $post-&gt;title = $data['title'];
    $post-&gt;author_id = $data['author_id'];

    // …
}</code></pre>
<p>Arrays in PHP are a powerful and versatile data structure.
At some point though, one should wonder whether there are better solutions for their problems.</p>
<h2>Know what you're writing</h2>
<p>Regular readers of this blog may know that I've written about type theory in <a href='/blog/liskov-and-type-safety' target='_blank' rel='noreferrer noopener'>the past</a>.
I won't revisit the pros and cons on strong type systems;
but I do want to say that array are a terrible choice
if they are meant to be used as anything else but lists.</p>
<p>Here's a simple question for you: what's in this array?</p>
<pre class="language-php"><code class="language-php">function doSomething(array $blogPost)
{
    $blogPost[/* Now what?? */];
}</code></pre>
<p>In this case, there are several ways of knowing what data we're dealing with:</p>
<ul>
<li>Read the source code.</li>
<li>Read the documentation.</li>
<li>Dump <code>$blogPost</code> to inspect it. </li>
<li>Or use a debugger to inspect it.</li>
</ul>
<p>I simply wanted to use this data,
but next I know I'm deep into debugging what kind of data I'm actually dealing with.
Are these really the things a programmer should be focused on?</p>
<p>Eliminating this uncertainty can reduce your cognitive load significantly.
This means you can focus on things that really matter:
stuff like application- and business logic.
You know, that's what most clients pay you to do.</p>
<p>It turns out that strongly typed systems can be a great help in understanding what exactly we're dealing with.
Languages like Rust, for example, solve this problem cleanly:</p>
<pre class="language-c"><code class="language-c">struct BlogPost {
    title: String,
    body: String,
    active: bool,
}</code></pre>
<p>A struct is what we need!
Unfortunately PHP doesn't have structs.
It has arrays and objects, and that's it.</p>
<p>However, we <em>can</em> do something like this:</p>
<pre class="language-php"><code class="language-php">class BlogPost
{
    public string $title;
    public string $body;
    public bool $active;
}</code></pre>
<p>Hang on, I know; we can't really do this, not <em>yet</em>.
PHP 7.4 <a href='https://wiki.php.net/rfc/typed_properties_v2' target='_blank' rel='noreferrer noopener'>will add typed properties</a>,
but they are still a long way away.</p>
<p>Imagine for a minute though that typed properties are already supported;
we could use the previous example like so, which our IDE could auto complete:</p>
<pre class="language-php"><code class="language-php">function doSomething(BlogPost $blogPost)
{
    $blogPost-&gt;title;
    $blogPost-&gt;body;
    $blogPost-&gt;active;
}</code></pre>
<p>We could even support relations:</p>
<pre class="language-php"><code class="language-php">class BlogPost
{
    public Author $author;

    // …
}</code></pre>
<pre class="language-php"><code class="language-php">function doSomething(BlogPost $blogPost)
{
    $blogPost-&gt;author-&gt;name;
}</code></pre>
<p>Our IDE would always be able to tell us what data we're dealing with.
But of course, typed properties don't exist in PHP yet.
What does exist… are docblocks.</p>
<pre class="language-php"><code class="language-php">class BlogPost
{
    /** @var string */
    public $title;

    /** @var string */
    public $body;

    /** @var bool */
    public $active;

    /** @var \Author */
    public $author;
}</code></pre>
<p>Docblocks are kind of a mess though: they are quite verbose and ugly;
but more important: they don't give any guarantees that the data is of the type they say it is! </p>
<p>Luckily, PHP has its reflection API. With it, a lot more is possible, even today.
The above example can actually be type validated with a little reflection magic,
as long as we don't write to the properties directly.</p>
<pre class="language-php"><code class="language-php">$blogPost = new BlogPost([
    'title' =&gt; 'First',
    'body' =&gt; 'Lorem ipsum',
    'active' =&gt; false,
    'author' =&gt; new Author()
]);</code></pre>
<p>That seems like a lot of overhead, right?
Remember the first example though!
We're not trying to construct these object manually,
we're reading them from a CSV file, a request or somewhere else:</p>
<pre class="language-php"><code class="language-php">$blogPost = new BlogPost($line);</code></pre>
<p>That's not bad, right?
And remember: a little reflection magic will ensure the values are of the correct type.
I'll show you how that works later.</p>
<p>I prefer this approach.
It enables auto completion on what would otherwise be a black box.
While it requires a little more setup: you'll have to write definitions of data;
the benefits in the long run are worth it.</p>
<p>Sidenote: when I say &quot;in the long run&quot;, I mean that this approach is especially useful in larger projects,
where you're working in the same code base with multiple developers, over a longer timespan.</p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>Reflecting types</h2>
<p>So, how can we assure that our properties are of the correct type?
Simple: read the <code>@var</code> docblock declartion, validate the value against that type,
and only than set it.
If the value is of a wrong type, we simply throw a <code>TypeError</code>.</p>
<p>Doing this extra check means we cannot write to the properties directly.
At least not if they are declared public.
And in our case public properties is something we really want,
because of when we're using these objects.
We want to be able to easily read data from them;
we don't care as much on making writes easy,
because we should never write to them after the object is constructed.</p>
<p>So we need a &quot;hook&quot; to validate a value against its type, before setting it.
There are two ways to do this in PHP.
Actually there are more, but these two are relevant.</p>
<h3>With a magic setter</h3>
<p>A magic setter in combination with private or protected properties
would allow us to run type validation before setting the value.</p>
<p>However, as mentioned before, we want a clean and public API to read from;
so magic setters are, unfortunately, a no go.</p>
<h3>Via the constructor</h3>
<p>Like in the previous example, we pass an array of data to the constructor,
and the constructor will map that data unto the properties of its class.
This is the way to go.</p>
<p>Here's a simplified way of doing this:</p>
<pre class="language-php"><code class="language-php">public function __construct(array $parameters)
{
    $publicProperties = $this-&gt;getPublicProperties();

    foreach ($publicProperties as $property) {
        $value = $parameters[$property-&gt;getName()];

        if (! $this-&gt;isValidType($property, $value) {
            throw new TypeError("…");
        }

        $this-&gt;{$property-&gt;getName()} = $value;
    }
}</code></pre>
<p>Maybe you're curious as to what <code>isValidType</code> exactly does?
Here is, again a simplified, implementation:</p>
<pre class="language-php"><code class="language-php">protected function isValidType(ReflectionProperty $property, $value): bool
{
    $type = $this-&gt;getTypeDeclaration($property);

    return $value instanceof $type
        || gettype($value) === $type;
    }
}</code></pre>
<p>Of course, there are some things missing here:</p>
<ul>
<li>Union types: <code>@var string|int</code></li>
<li><code>@var mixed</code> support</li>
<li>Generic collections: <code>@var \Foo[]</code></li>
<li>Nullable support: <code>@var int|null</code></li>
</ul>
<p>But it is very easy to add these checks to our <code>isValidType</code> method.
And that's exactly what we did by the way, we made this into a package: <a href='https://github.com/spatie/data-transfer-object' target='_blank' rel='noreferrer noopener'>spatie/data-transfer-object</a>.</p>
<h2>What about immutability?</h2>
<p>How to handle immutability is the last question to answer.
If we use these objects to represent data from the outside,
are there any valid use cases for changing these objects once they are constructed?</p>
<p>In 98% of the cases, the answer should be plain and simple: no.
We'll never be able to change the data source,
hence we shouldn't be able to change the object representing that source.</p>
<p>Real life projects are often not as black and white as I portray it here.
While there might be some use cases, I think the mindset of &quot;construct once, and never change&quot;
is a good one.</p>
<p>So how to enforce this in PHP? </p>
<p>Unfortunately: we don't.
There has been talk of so called &quot;read only&quot; properties in PHP's core,
but it's a difficult thing to get right.
Than what about our userland type system?
Unless we're giving up the ease of reading, the auto completion part;
there will be no way to achieve this goal in PHP.</p>
<p>See, we <em>need</em> magic getters to support this behaviour;
at the same time we <em>don't</em> want them.
They would negate one of the goals we're trying to achieve: easy discoverability. </p>
<p>So for now, unfortunately,
our package will allow writes to an object's properties after it is constructed.
We are just careful not to do it.</p>
<hr />
<p>I hope this post inspired you to think about your own code bases,
and that you might be prompted to try this pattern out in your projects;
with <a href='https://github.com/spatie/data-transfer-object' target='_blank' rel='noreferrer noopener'>our package</a> or your own implementation.</p>
<p>If there are any thoughts coming to your mind,
if you want to discuss this further; I'd love to here from you!
You can reach me via <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>. </p> ]]></summary>

        <updated>2018-11-11T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ PhpStorm OSX performance: October 2018 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance-october-2018"/>

        <id>https://www.stitcher.io/blog/phpstorm-performance-october-2018</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>PhpStorm has had performance issues on OSX for a very long time now,
sometimes to the point of being unusable.</p>
<p>I've written about these issues before, but it's good to keep a regularly updated list of what's going on.
So without further ado: if you're on OSX (Sierra, High Sierra or Mojave);
if you're experiencing PhpStorm performance issues, this post might help you.</p>
<h2>External monitor resolution</h2>
<p>Do you have an external monitor plugged into your MacBook?
There's an issue in Java Swing, the UI framework that PhpStorm uses under the hood.
In short: if you're using a non-default resolution,
Java has to do a lot of calculations to deal with half pixels and such.</p>
<p>In case of 4k monitors, we've seen good results with 1080p and 4k resolutions,
as they are natively supported.
All other resolutions can cause massive performance issues.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/phpstorm-performance-october/resolution-default.png" srcset="/resources/img/blog/phpstorm-performance-october/resolution-default-632x428.png 632w, /resources/img/blog/phpstorm-performance-october/resolution-default-774x524.png 774w, /resources/img/blog/phpstorm-performance-october/resolution-default-447x303.png 447w, /resources/img/blog/phpstorm-performance-october/resolution-default-999x677.png 999w, /resources/img/blog/phpstorm-performance-october/resolution-default-894x606.png 894w" sizes="" alt="Default resolution example" /></p>
<p>Default resolutions work fine.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/phpstorm-performance-october/resolution-scaled.png" srcset="/resources/img/blog/phpstorm-performance-october/resolution-scaled-894x606.png 894w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-447x303.png 447w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-632x428.png 632w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-774x524.png 774w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-999x677.png 999w" sizes="" alt="Scaled resolution example" /></p>
<p>Scaled resolutions not so much…</p>
<h2>Font antialiasing</h2>
<p>In your settings, under <code>Editor &gt; Appearance &amp; Bahaviour &gt; Appearance</code>,
you'll find the editor font antialiasing options.</p>
<p>By default, antialiasing is set to <code>subpixel</code>, to render very smooth fonts.
Again, because of Java graphical issues, there can be a big performance hit. </p>
<p><img src="/resources/img/blog/phpstorm-performance-october/font-settings.png" srcset="/resources/img/blog/phpstorm-performance-october/font-settings-1134x284.png 1134w, /resources/img/blog/phpstorm-performance-october/font-settings-878x219.png 878w, /resources/img/blog/phpstorm-performance-october/font-settings-1014x253.png 1014w, /resources/img/blog/phpstorm-performance-october/font-settings-717x179.png 717w, /resources/img/blog/phpstorm-performance-october/font-settings-507x126.png 507w" sizes="" alt="Font antialiasing settings" /></p>
<p>It's better to set the antialiasing setting to <code>greyscale</code>, or disable it altogether.</p>
<p>Your font choice might also impact performance.
I know this might take some time to get used to, but try using another font.
I always used Ubuntu Mono, but switched to Monaco, and had noticeable improvements.</p>
<h2>JavaFX enabled plugins</h2>
<p>Some plugins make use of JavaFX, that may cause rendering issues.
As an easy way to know if you're running such plugins, you can do the following.</p>
<p>Get the PID of the running PhpStorm process:</p>
<pre class="language-bash"><code class="language-bash">&gt; top | grep phpstorm

82912  phpstorm         …</code></pre>
<p>Next, run <code>jstack</code> with PhpStorm's process ID, and grep for &quot;quantum&quot;:</p>
<pre class="language-bash"><code class="language-bash">&gt; jstack 82912 | grep quantum

at com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:125)</code></pre>
<p>If you see any output (as above), it means that plugins are using JavaFX.
Using these plugins will increase performance issues over time, especially if you're running PhpStorm as a maximized window.</p>
<p>The only way to know which plugins are using JavaFX is by disabling plugins, one by one; restarting PhpStorm and doing the above <code>jstack</code> test again.
One very popular plugin depending on JavaFX is the Markdown plugin.</p>
<h2>JDK versions</h2>
<p>The last thing you can do is download a new Java JDK, another version, and use that one to run PhpStorm.</p>
<p>You can configure the JDK PhpStorm is using by opening the command palette and search for <code>Switch Boot JDK…</code>.</p>
<p><img src="/resources/img/blog/phpstorm-performance-october/jdk.png" srcset="/resources/img/blog/phpstorm-performance-october/jdk-719x225.png 719w, /resources/img/blog/phpstorm-performance-october/jdk-804x252.png 804w, /resources/img/blog/phpstorm-performance-october/jdk-508x159.png 508w, /resources/img/blog/phpstorm-performance-october/jdk-359x112.png 359w, /resources/img/blog/phpstorm-performance-october/jdk-622x194.png 622w" sizes="" alt="Boot JDK" /></p>
<p>It's important to note that IntelliJ products won't run on all JDKs!
At the time of writing, Java 10 won't work yet.</p>
<p>If you've configured a JDK that broke PhpStorm, you can still fix it though.
There's a file in your preferences folder which contains the JDK you're using:</p>
<pre><code>~/Library/Preferences/IntelliJIdea&lt;VERSION&gt;/idea.jdk</code></pre>
<p>You can change the JDK path there.
More information on switching JDKs can be found <a href='https://intellij-support.jetbrains.com/hc/en-us/articles/206544879-Selecting-the-JDK-version-the-IDE-will-run-under' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<h2>In closing:</h2>
<p>Software development is hard.</p>
<p>It's understandable why JetBrains chooses Java as a platform for their IDEs.
Unfortunately Java Swing, an older UI framework, doesn't play well with modern OSX platforms.</p>
<p>Whose fault is this? Should JetBrains fix it? Will they be able to?
There's no clear answer to those questions.
There's an active issue <a href='https://youtrack.jetbrains.com/issue/JRE-526' target='_blank' rel='noreferrer noopener'>here</a>,
where you can follow the progress;
though I doubt there will be any solutions soon.</p>
<p>For now, we'll have to deal with these performance issues,
because&thinsp;—&thinsp;even though they are annoying&thinsp;—&thinsp;PhpStorm is still the best PHP IDE out there, by far. </p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-10-26T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Share a blog: assertchris.io ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-assertchris-io"/>

        <id>https://www.stitcher.io/blog/share-a-blog-assertchris-io</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p><a href='https://twitter.com/assertchris' target='_blank' rel='noreferrer noopener'>Christopher Pitt</a> is one of the inspirations why I got into blogging and conference talks.
Being an excellent writer&thinsp;—&thinsp;he used to blog on Sitepoint and Medium&thinsp;—&thinsp;he now decided to host his content on his own website.
A wise decision!</p>
<p>I'd highly recommend adding his blog to your RSS reader, or bookmark it somewhere: <a href='https://assertchris.io/' target='_blank' rel='noreferrer noopener'>assertchris.io</a>.
There's lots of good content to look forward to!</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-10-25T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Array merge vs. + ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/array-merge-vs+"/>

        <id>https://www.stitcher.io/blog/array-merge-vs+</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>PHP has several ways of combining two arrays into one.
There's a subtle difference between two methods though,
a difference worth knowing.</p>
<p>Let's take a look at how these two methods compare:</p>
<pre class="language-php"><code class="language-php">array_merge($first, $second);

// vs.

$first + $second;</code></pre>
<p>Let's say these are the two arrays we're working with:</p>
<pre class="language-php"><code class="language-php">$first = [
    'a',
    'b',
];

$second = [
    'c',
];</code></pre>
<p>This would be the result of a simple <code>array_merge</code> call:</p>
<pre class="language-php"><code class="language-php">array_merge($first, $second);

[
    'a',
    'b',
    'c',
]</code></pre>
<p>While the <code>+</code> operator gives us this result:</p>
<pre class="language-php"><code class="language-php">$first + $second;

[
    'a',
    'b',
]</code></pre>
<p>Switching the operands while using the <code>+</code> operator, gives a different result:</p>
<pre class="language-php"><code class="language-php">$second + $first;

[
    'c',
    'b',
]</code></pre>
<p>Confused? So was I.</p>
<p>Let's write out the <code>$first</code> and <code>$second</code> arrays in full, with their indices.
This will make things more clear:</p>
<pre class="language-php"><code class="language-php">$first = [
    0 =&gt; 'a',
    1 =&gt; 'b',
];

$second = [
    0 =&gt; 'c',
];</code></pre>
<p>By now you can probably guess what's going on:
the <code>+</code> operator will only <em>add</em> the elements of the rightside operand, if their key
doesn't exist in the leftside operand, while <code>array_merge</code> will <em>override</em> existing keys.</p>
<p>By that definition, we can also determine that <code>+</code> can never be used to recursively merge arrays,
as it will leave existing elements untouched:</p>
<pre class="language-php"><code class="language-php">$first = [
    'A' =&gt; [
        'B' =&gt; true,
        'C' =&gt; true,
    ],
];

$second = [
    'A' =&gt; [
        'B' =&gt; false,
        'C' =&gt; false,
    ],
];

$first + $second;</code></pre>
<p>Here's the result:</p>
<pre class="language-php"><code class="language-php">[
    'A' =&gt; [
        'B' =&gt; true,
        'C' =&gt; true,
    ],
]</code></pre>
<p>While using <code>array_merge</code>, would give this result:</p>
<pre class="language-php"><code class="language-php">[
    'A' =&gt; [
        'B' =&gt; false,
        'C' =&gt; false,
    ],
]</code></pre>
<p>&quot;Hang on&quot;, I hear you say, &quot;isn't that what <code>array_merge_recursive</code> is supposed to do?&quot;.</p>
<p>Here we have a case of unfortunate naming.
Please don't be surprised&thinsp;—&thinsp;it's PHP after all.</p>
<p>See, <code>array_merge</code> will merge matching elements by overriding them.
<code>array_merge_recursive</code> on the other hand will keep both elements, and merge them in a new array, keeping both values.</p>
<p>This is what our previous example would look like, using <code>array_merge_recursive</code>:</p>
<pre class="language-php"><code class="language-php">[
    'A' =&gt; [
        'B' =&gt; [
            true,
            false,
        ],
        'C' =&gt; [
            true,
            false,
        ],
    ],
]</code></pre>
<p>What about merging multiple arrays?
You can probably guess the outcome by now:</p>
<pre class="language-php"><code class="language-php">$first = ['a'];
$second = ['b'];
$third = ['c'];</code></pre>
<p>Here's what <code>array_merge</code> results in:</p>
<pre class="language-php"><code class="language-php">array_merge($first, $second, $third)</code></pre>
<pre class="language-php"><code class="language-php">[
    'a',
    'b',
    'c',
]</code></pre>
<p>Chaining the <code>+</code> operator also works, with the following result:</p>
<pre class="language-php"><code class="language-php">$first + $second + $third</code></pre>
<pre class="language-php"><code class="language-php">[
    'a',
]</code></pre>
<hr />
<p>With this little refresher,
I hope that you won't find yourself confused anymore when you're deep into your code and need to merge arrays.</p>
<p>I found it to be a cognitive burden when I had to stop and think about &quot;hang on, what is the correct way to do this?&quot;.
Luckily now, we know!</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-10-24T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Laravel view models vs. view composers ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/laravel-view-models-vs-view-composers"/>

        <id>https://www.stitcher.io/blog/laravel-view-models-vs-view-composers</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Last month I wrote about view models in Laravel.
I received a lot of good reactions on the post, but also the same question over and over again:
how do view models differ from view composers in Laravel?</p>
<p>Time to clarify this question once and for all.</p>
<h2>View composers</h2>
<p>Let's look at how view composers are used in Laravel.
View composers are a way of binding data to a view from global configuration.</p>
<p>The Laravel documentation explains it like this:</p>
<blockquote>
<p>View composers are callbacks or class methods that are called when a view is rendered.
If you have data that you want to be bound to a view each time that view is rendered,
a view composer can help you organize that logic into a single location.</p>
</blockquote>
<p>View composers are registered like this, the example is taken from the Laravel docs.</p>
<pre class="language-php"><code class="language-php">class ComposerServiceProvider extends ServiceProvider
{
    public function boot()
    {
        View::composer(
            'profile', ProfileComposer::class
        );

        View::composer('dashboard', function ($view) {
            // …
        });
    }

    // …
}</code></pre>
<p>As you can see you can both use a class and a closure which you can use to add variables to a view.</p>
<p>Here's how view composers are used in controllers.</p>
<pre class="language-php"><code class="language-php">class ProfileController
{
    public function index()
    {
        return new view('profile');
    }
}</code></pre>
<p>Can you see them? Nope, of course not: view composers are registered somewhere in the global state,
and you don't know which variables are available to the view, without that implicit knowledge.</p>
<p>Now I <em>know</em> that this isn't a problem in small projects.
When you're the single developer and only have 20 controllers and maybe 20 view composers,
it'll all fit in your head.</p>
<p>But what about a project with three or four developers, with hundreds of controllers?
What if you're taking over a legacy project where you don't have this implicit knowledge?</p>
<p>This is why at <a href='https://spatie.be' target='_blank' rel='noreferrer noopener'>Spatie</a>, we use view models in our larger projects.
They make everything much more explicit, which helps us keep the code maintainable.</p>
<p>Here's what we do:</p>
<pre class="language-php"><code class="language-php">class ProfileController
{
    public function index(User $user)
    {
        return new view(
            'profile', 
            new ProfileViewModel($user)
        );
    }
}</code></pre>
<p>Now it's clear now from the controller itself what variables are available to the view.
We can also re-use the same view for multiple contexts.
An example would be the same form view used in the create and edit actions. </p>
<p>One last added benefit, one you might not have thought about,
is that we can pass data into the view model explicitly.
If you want to use a route argument or bound model to determine data passed to the view,
it is done explicitly.</p>
<p>In conclusion: managing global state is a pain in large applications,
especially when you're working with multiple developers on the same project.
Also remember that just because two means have the same end result,
that doesn't mean that they are the same!</p>
<p>I hope this quick writeup answers all the questions about the difference between view models and -composers.
If you want to know more about view models in particular,
be sure to read the blog post about them <a href="/blog/laravel-view-models">here</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-10-16T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Organise by domain ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/organise-by-domain"/>

        <id>https://www.stitcher.io/blog/organise-by-domain</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>In this post we'll look at a different approach of structuring large code bases into separate domains.
The name &quot;domain&quot; is derived from the popular DDD paradigm, or also: domain driven design.</p>
<p>While many concepts in this post are inspired by DDD principles,
they don't strictly follow domain driven design.
In our context, &quot;domain&quot; could also be named &quot;module&quot;.
A &quot;domain&quot; simply refers to a category of related stuff,
that's it. </p>
<p>It's also important to note is that this approach isn't a silver bullet.
At <a href='https://spatie.be' target='_blank' rel='noreferrer noopener'>Spatie</a> we choose a different project structure
based on the needs of that specific project.
It is possible that your project isn't a good fit for what we'll be reviewing today.</p>
<p>In our experience, today's principles are mostly beneficial in larger projects:</p>
<ul>
<li>Long running projects with an initial development timespan of half a year to one year or more,
with several years of maintenance and extensions after that.</li>
<li>Around fifty to hundred models representing the business.</li>
<li>Several hundred routes exposing functionality to the outside.</li>
</ul>
<h2>So, what is a &quot;domain&quot; ?</h2>
<p>If you've worked on these kinds of large projects before,
you know that &quot;the business logic&quot; never is just <em>one</em> thing.
Often during development, you'll identify &quot;sub-systems&quot; within the larger domain;
that is: the collection of problems you're trying to solve with your code.</p>
<p>To name a few examples: user management, inventory management, invoicing and contracts.
I'm sure you can think of many others.</p>
<p>Most likely, every sub-system has one or several models.
But it doesn't stop there:
models can be interacted with,
actions can be performed with them,
there can be system-specific validation rules,
ways of passing data between systems, and more.</p>
<p>Looking at a standard Laravel application, the code describing a single system
is often spread across multiple directories:</p>
<pre><code>app/
├── Enums/
│   ├── ContractDurationType.php
│   └── ContractType.php
├── Exceptions/
│   └── InvalidContractDate.php
├── Models/
│   └── Contract.php
└── Rules/
    ├── ContractAvailabilityRule.php
    └── ContractDurationRule.php</code></pre>
<p>This structure was the first struggle that prompted me to look for a better solution.
I often found myself searching through several places in order to work one thing, one system.</p>
<p>So why not group sub-systems together?
It looks something like this:</p>
<pre><code>Domain/
├── Contracts/
├── Invoicing/
└── Users/</code></pre>
<p>You can see the name <code>Domain</code> here.
According to Oxford Dictionary, a &quot;domain&quot; can be described like so:</p>
<blockquote>
<p>A specified sphere of activity or knowledge.</p>
</blockquote>
<p>We're grouping code together based on their sphere of activity, their domain.
Let's zoom into one specific domain folder:</p>
<pre><code>Contracts/
├── Actions/
├── Enums/
├── Exceptions/
├── Models/
├── Rules/
├── Status/
└── ValueObjects/</code></pre>
<p>Modern PHP developers are most likely familiar with most of these folder names.
Though some deserve a little more attention.</p>
<h3>Actions</h3>
<p>Actions are probably the most powerful tool within this whole setup.
An action is a class that performs an operation within its domain.
This might be a simple task like creating or updating a model,
or something more complex following one or several business rules like approving a contract.</p>
<p>Because a single action only focuses on one task,
they are extremely flexible:
an action can be composed out of other actions and they can be injected wherever you want.</p>
<p>Here's an example of two actions working together: <code>CreateOrUpdateContractLine</code> and <code>ResolveContractLines</code>.
The first one will do as its name says: create or update a single contract line.
The second one will loop over a collection of user input, and resolve the lines one by one.</p>
<p>Here's what <code>ResolveContractLines</code> will do:</p>
<ul>
<li>Loop over the user input and create or update existing lines.</li>
<li>Keep a list of contract lines which are currently added to the contract.</li>
<li>Remove all lines that don't exist anymore, the user has removed them.</li>
</ul>
<p>Here's the code:</p>
<pre class="language-php"><code class="language-php">class ResolveContractLines
{
    public function __construct(
        CreateOrUpdateContractLine $createOrUpdateContractLine,
        RemoveContractLine $removeContractLine
    ) { /* … */ }

    public function execute(
        Contract $contract,
        ContractLinesCollection $contractLinesCollection
    ) {
        $lineIds = [];

        foreach ($contractLinesCollection as $contractLineData) {
            $contractLine = $this-&gt;createOrUpdateContractLine
                -&gt;execute($contractLineData);

            $lineIds[] = $contractLine-&gt;id;
        }

        $contractLinesToRemove = ContractLine::query()
            -&gt;whereContract($contract)
            -&gt;whereNotIn('id', $lineIds)
            -&gt;get();

        foreach ($contractLinesToRemove as $contractLine) {
            $this-&gt;removeContractLine-&gt;execute($contractLine);
        }
    }
}</code></pre>
<p>Besides composing actions together, they are also great for testing.
Because of an action's small size and single responsibility,
it can be unit tested very efficiently.</p>
<p>Actions also encapsulate most of the business logic for the app:
generating contract numbers, changing statuses, handling side-effects in an explicit way,…
This makes it easier for developers to reason about what the application does,
as most of its business is encapsulated as actions.</p>
<p>If you're into DDD, you're probably thinking of commands right now.
Actions are a simpler version of them.
There's no command bus and actions may directly return values.
For the scope of our projects, it's a very manageable approach.</p>
<h3>ValueObjects</h3>
<p>You're probably wondering how this domain stuff ties together with controllers or CLI commands.
That's of course the place where you'll use them.
There's one more abstraction we need to understand though: value objects.</p>
<p><em>Update</em>: since writing this blog post there has been an interesting discussion
on the name of &quot;value object&quot;. We've changed the name to &quot;data transfer object&quot;.
You can read more about this naming <a href='https://github.com/spatie/data-transfer-object/issues/17' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<p>Have you noticed the <code>ContractLinesCollection</code> passed to the <code>ResolveContractLines</code> action in the previous example?
That's a value object.</p>
<p>Working with user input isn't always straight forward.
For example, in Laravel applications you'll get an array of form data or an array of CLI arguments,
the rest is up to you.</p>
<p>Value objects are a representation of that user data, in a structured way.
Because we want don't want to concern our actions with input validation,
we pass them a value object.
There's one rule applied to value objects: if they exist, they are valid.</p>
<p>Most of the time, value objects are a simple mapping between validated request data,
and properties that can be used by actions.</p>
<p>Here's an example of a value object:</p>
<pre class="language-php"><code class="language-php">class ContractLineData
{
    public $price;
    public $dateFrom;
    public $dateTo;
    public $article;

    public static function fromArray(
        array $input
    ): ContractLineData {
        return new self(
            $input['price'],
            Carbon::make($input['date_from']),
            Carbon::make($input['date_to']),
            Article::find($input['article_id'])
        );
    }

    public function __construct(
        int $price,
        Carbon $dateFrom,
        Carbon $dateTo,
        Article $article
    ) { /* … */ }
}</code></pre>
<p>Because of convenience, we're using public properties.
You can imagine why we're looking forward to strongly typed and readonly properties in PHP.</p>
<p>Value objects allow actions to only focus on the actual action,
and not be concerned whether input is valid or not.
Furthermore, it's easy to fake a value object, making tests simpler once more.</p>
<h2>Tying it together</h2>
<p>Up until this point, I've said almost nothing about controllers or CLI commands,
and how they fit into this picture. That's intentional.</p>
<p>See, because our domains are split into separate areas,
we're able to develop a whole domain, without ever writing a single controller or view.
Everything in the domain is easily testable,
and almost every domain can be be developed side by side with other domains.</p>
<p>In larger projects, this is a highly efficient approach.
We've got two or three backend developers working on one project,
and each of them has a domain they are working on next to each other.</p>
<p>Also, because every domain is tested, we're very certain that all business logic
required by the client works as intended, before writing a single form and integration tests.</p>
<p>Once a domain is done, it can be consumed.
The domain itself doesn't care when or where it is used,
its usage rules are clear to the outside.</p>
<p>This means we're able to build one or more applications, using the existing domains.
In one of our projects, there's an admin HTTP application and a REST API.
Both of them use the same domains; their actions, models, rules, etc.
You can see how this approach is not only efficient during development,
but also enables for much better scaling.</p>
<p>Here's an example of how a controller in the admin HTTP application looks:</p>
<pre class="language-php"><code class="language-php">class ContractsController
{
    public function index() { /* … */ }

    public function edit(Contract $contract) { /* … */ }

    public function update(
        Contract $contract,
        UpdateContract $updateContract,
        UpdateContractRequest $updateContractRequest
    ) {
        $contract = $updateContract-&gt;execute(
            $contract,
            ContractData::fromRequest($updateContractRequest)
        );

        return new ContractViewModel($contract);
    }
}</code></pre>
<p>Almost all our controllers actions are as simple as this:</p>
<ul>
<li>Validate the request data and parse it into a value object.</li>
<li>Execute the action, we don't care anymore what happens underneath at this point.</li>
<li>Return the result, in our case using <a href="/blog/laravel-view-models">view models</a>.</li>
</ul>
<h2>In closing</h2>
<p>Structuring code in domains increases efficiency between developers on a single project.
Furthermore, it decreases the complexity of maintenance, because sub-systems are separated and well tested.</p>
<p>By using actions and value objects, you're able to communicate with the domain
in a controlled and testable way.
While it takes longer to initially write, this approach pays off very quickly,
even during early development.</p>
<p>Maybe the most important reason for structuring our code this way,
is that it's easier to understand.
We humans don't think in abstracts like &quot;models&quot;, &quot;actions&quot; and &quot;rules&quot;;
we categorize complex business processes into sub-systems.
Things like &quot;contracts&quot; and &quot;invoicing&quot;.</p>
<p>I've been structuring complex code bases like this for two years,
and can say from experience that it's significantly more easy to reason about them now.
In end, I believe developer experience is equally important as theoretical knowledge and paradigms to succeed.</p>
<hr />
<p>👋 Hi, thanks for reading!
I hope this post can help you in one way or another.</p>
<p>If you want to talk more about this topic –I do– you can always send me a Tweet or e-mail.
Here's my <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a>, and here my <a href="mailto:brendt@stitcher.io">e-mail</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-10-16T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Laravel view models ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/laravel-view-models"/>

        <id>https://www.stitcher.io/blog/laravel-view-models</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>View models are an abstraction to simplify controller and model code.
View models are responsible for providing data to a view,
which would otherwise come directly from the controller or the model.
They allow a better separation of concerns, and provide more flexibility for the developer.</p>
<p>In essence, view models are simple classes that take some data,
and transform it into something usable for the view.
In this post I'll show you the basic principles of the pattern,
we'll take a look at how they integrate in Laravel projects,
and finally I'll show you how we use the pattern in one of <a href='https://spatie.be' target='_blank' rel='noreferrer noopener'>Spatie</a>'s, our company, projects.</p>
<p>Let's get started.
Say you have a form to create a blog post with a category.
You'll need a way to fill the select box in the view with category options.
The controller has to provide those.</p>
<pre class="language-php"><code class="language-php">public function create()
{
    return view('blog.form', [
        'categories' =&gt; Category::all(),
    ]);
}</code></pre>
<p>The above example works for the create method,
but let's not forget we should also be able to edit existing posts.</p>
<pre class="language-php"><code class="language-php">public function edit(Post $post)
{
    return view('blog.form', [
        'post' =&gt; $post,
        'categories' =&gt; Category::all(),
    ]);
}</code></pre>
<p>Next there's a new business requirement:
users should be restricted in which categories they are allowed to post in.
In other words: the category selection should be restricted based on the user.</p>
<pre class="language-php"><code class="language-php">return view('blog.form', [
    'categories' =&gt; Category::allowedForUser(
        current_user()
    )-&gt;get(),
]);</code></pre>
<p>This approach doesn't scale.
You'll have to change code both in the <code>create</code> and <code>edit</code> method.
Can you imagine what happens when you need to add tags to a post?
Or if there's another special admin form for creating and editing posts?</p>
<p>The next solution is to have the post model itself provide the categories, like so:</p>
<pre class="language-php"><code class="language-php">class Post extends Model
{
    public static function allowedCategories(): Collection 
    {
        return Category::query()
            -&gt;allowedForUser(current_user())
            -&gt;get();
    }
}</code></pre>
<p>There are numerous reasons why this is a bad idea, though it happens often in Laravel projects.
Let's focus on the most relevant problem for our case: it still allows for duplication.</p>
<p>Say there's a new model <code>News</code> which also needs the same category selection.
This causes again duplication, but on the model level instead of in the controllers.</p>
<p>Another option is to put the method on the <code>User</code> model.
This makes the most sense, but also makes maintenance harder.
Imagine we're using tags as mentioned before.
They don't rely on the user.
Now we need to get the categories from the user model, and tags from somewhere else.</p>
<p>I hope it's clear that using models as data providers for views also isn't the golden bullet.</p>
<p>In summary, wherever you try to get the categories from,
there always seems to be some code duplication.
This makes it harder to maintain and reason about the code.</p>
<p>This is where view models come into play.
They encapsulate all this logic so that it can be reused in different places.
They have one responsibility and one responsibility only: providing the view with the correct data.</p>
<pre class="language-php"><code class="language-php">class PostFormViewModel
{
    public function __construct(
        User $user, 
        Post $post = null
    ) {
        $this-&gt;user = $user;
        $this-&gt;post = $post;
    }

    public function post(): Post
    {
        return $this-&gt;post ?? new Post();
    }

    public function categories(): Collection
    {
        return Category::allowedForUser($this-&gt;user)-&gt;get();
    }
}</code></pre>
<p>Let's name a few key features of such a class:</p>
<ul>
<li>All dependencies are injected, this gives the most flexibility to the outside.</li>
<li>The view model exposes some methods that can be used by the view.</li>
<li>There will either be a new or existing post provided by the <code>post</code> method,
depending on whether your creating or editing a post.</li>
</ul>
<p>This is what the controller looks like:</p>
<pre class="language-php"><code class="language-php">class PostsController
{
    public function create()
    {
        $viewModel = new PostFormViewModel(
            current_user()
        );

        return view('blog.form', compact('viewModel'));
    }

    public function edit(Post $post)
    {
        $viewModel = new PostFormViewModel(
            current_user(), 
            $post
        );

        return view('blog.form', compact('viewModel'));
    }
}</code></pre>
<p>And finally the view can use it like so:</p>
<pre class="language-html"><code class="language-html">&lt;input value="{{ $viewModel-&gt;post()-&gt;title }}" /&gt;
&lt;input value="{{ $viewModel-&gt;post()-&gt;body }}" /&gt;

&lt;select&gt;
    @foreach ($viewModel-&gt;categories() as $category)
        &lt;option value="{{ $category-&gt;id }}"&gt;
            {{ $category-&gt;name }}
        &lt;/option&gt;
    @endforeach
&lt;/select&gt;</code></pre>
<p>These are the two benefits of using view models: </p>
<ul>
<li>They encapsulate the logic</li>
<li>They can be reused in multiple contexts</li>
</ul>
<h2>View models in Laravel</h2>
<p>The previous example showed a simple class with some methods.
This is enough to use the pattern,
but within Laravel projects, there are a few more niceties we can add.</p>
<p>For example, you can pass a view model directly to the <code>view</code> function if the view model implements <code>Arrayable</code>. </p>
<pre class="language-php"><code class="language-php">public function create()
{
    $viewModel = new PostFormViewModel(
        current_user()
    );

    return view('blog.form', $viewModel);
}</code></pre>
<p>The view can now directly use the view model's properties like <code>$post</code> and <code>$categories</code>.
The previous example now looks like this:</p>
<pre class="language-html"><code class="language-html">&lt;input value="{{ $post-&gt;title }}" /&gt;
&lt;input value="{{ $post-&gt;body }}" /&gt;

&lt;select&gt;
    @foreach ($categories as $category)
        &lt;option value="{{ $category-&gt;id }}"&gt;
            {{ $category-&gt;name }}
        &lt;/option&gt;
    @endforeach
&lt;/select&gt;</code></pre>
<p>You can also return the view model itself as JSON data, by implementing <code>Responsable</code>.
This can be useful when you're saving the form via an AJAX call,
and want to repopulate it with up-to-date data after the call is done. </p>
<pre class="language-php"><code class="language-php">public function update(Request $request, Post $post)
{
    // Update the post…

    return new PostFormViewModel(
        current_user(),
        $post
    );
}</code></pre>
<p>You might see a similarity between view models and Laravel resources.
Remember that resources map one-to-one on a model, when view models may provide whatever data they want.</p>
<p>In one of our projects, we're actually using resources in view models!</p>
<pre class="language-php"><code class="language-php">class PostViewModel
{
    // …

    public function values(): array
    {
        return PostResource::make(
            $this-&gt;post ?? new Post()
        )-&gt;resolve();
    }
}</code></pre>
<p>Finally, in this project we're working with Vue form components, which require JSON data.
We've made an abstraction which provides this JSON data instead of objects or arrays,
when calling the magic getter:</p>
<pre class="language-php"><code class="language-php">abstract class ViewModel
{
    // …

    public function __get($name): ?string
    {
        $name = Str::camel($name);

        // Some validation…

        $values = $this-&gt;{$name}();

        if (! is_string($values)) {
            return json_encode($values);
        }

        return $values;
    }
}</code></pre>
<p>Instead of calling the view model methods, we can call their property and get a JSON back.</p>
<pre class="language-html"><code class="language-html">&lt;select-field
    label="{{ __('Post category') }}"
    name="post_category_id"
    :options="{{ $postViewModel-&gt;post_categories }}"
&gt;&lt;/select-field&gt;</code></pre>
<h3>Wait, what about view composers?</h3>
<p>I hear you! There's a whole separate blog post on that topic.
You can read it <a href="/blog/laravel-view-models-vs-view-composers">here</a>.</p>
<hr />
<p>In summary, view models can be a viable alternative to working with the data directely in a controller.
They allow for better reusability and encapsulate logic that doesn't belong in the controller. </p>
<p>You're also not confined to forms when using them.
At Spatie we also use them to populate facet filter options,
based on a complex context the user is currently working in.</p>
<p>I'd recommend trying this pattern out.
You don't need anything to get started by the way.
All Laravel gimmicks listed above are optional and can be added depending on your use case.</p>
<p>And just in case you'd like to use Laravel gimmicks, we've got a package for it:
<a href='https://github.com/spatie/laravel-view-models' target='_blank' rel='noreferrer noopener'>spatie/laravel-view-models</a> 🤗.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-09-10T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Eloquent MySQL views ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/eloquent-mysql-views"/>

        <id>https://www.stitcher.io/blog/eloquent-mysql-views</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>MySQL views are a way of storing queries on the database level, and producing virtual tables with them.
In this post we'll look at why you want to use them and how they can be integrated in Laravel with Eloquent models.</p>
<p>If you're already convinced of the power of MySQL views, or just want to know how to implement them in Laravel,
you're free to <a href="#impatient">skip ahead</a>.</p>
<h2>Benefits of MySQL views</h2>
<p>A view in MySQL stores the result of a query in a table-like structure.
You're able to query this view just like you would query a normal table.</p>
<p>The power of views is twofold:</p>
<ul>
<li>Complex queries with joins and unions can be represented as a queryable table on their own.</li>
<li>MySQL is generally smarter than us when it comes to querying data.
Compared to using collections or array functions in PHP, there's a big performance gain.</li>
</ul>
<p>There's also a caveat to using views though.
Depending on the kind of query, MySQL will need to construct an &quot;in memory&quot; table representing the view, at runtime.
This operation is called table materialization and happens when using certain keywords like <code>GROUP BY</code>, or aggregated functions.</p>
<p>The takeaway is that views might actually hurt query performance,
depending on the kind of query you're executing.
As with all things, views are a good solution for some problems, but a terrible idea for others.
Use them wisely, and read up on their restrictions <a href='https://dev.mysql.com/doc/refman/8.0/en/view-restrictions.html' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<h2>Views and their alternatives</h2>
<p>Let's look at a real-life example, to demonstrate how we could solve a given problem.</p>
<p>We've got a model <code>MeterReading</code> which logs a meter reading done in an apartment building.
Every unit in the building has its own electricity, water and gas meters.</p>
<p>Every reading is listed in the database with a reference to the unit, the date,
the user doing the reading, the type, and the actual meter value.
Type in this example is <code>electricity</code>, <code>water</code> or <code>gas</code>.</p>
<p>This is what a simplified migration of this table looks like:</p>
<pre class="language-php"><code class="language-php">Schema::create('meter_readings', function (Blueprint $table) {
    $table-&gt;unsignedInteger('unit_id');
    $table-&gt;unsignedInteger('user_id');

    $table-&gt;string('type');
    $table-&gt;dateTime('date');
    $table-&gt;unsignedInteger('value');
});</code></pre>
<p>Now the client asks us to generate reports based on this raw data.
He wants to see an overview of the units, where every row represents
the readings for that unit, on that day, and whether all readings were done or not.</p>
<p>In short, he wants to see this:</p>
<pre class="language-txt"><code class="language-txt">+---------+---------+------------+-------------+-------+-----+
| unit_id | user_id | date       | electricity | water | gas |
+---------+---------+------------+-------------+-------+-----+
|      14 |      72 | 2018-08-19 |           0 |     1 |   0 |
|      59 |      61 | 2018-08-06 |           0 |     0 |   1 |
|      41 |      64 | 2018-08-02 |           1 |     1 |   1 |
|      41 |      45 | 2018-08-02 |           1 |     1 |   1 |
...
|      41 |      51 | 2018-08-02 |           1 |     1 |   1 |
+---------+---------+------------+-------------+-------+-----+</code></pre>
<p>The report show a data set that is grouped by unit, user and day;
and the corresponding readings done for at the time.</p>
<p>Here are a few ways of generating this report.</p>
<h3>On the fly</h3>
<p>We always query all the data, and group it in our code.
This is the most easy way of doing it, but has some downsides:</p>
<ul>
<li>PHP and Laravel collections are slow, compared to the optimised algorithms MySQL can use.</li>
<li>Building a virtual data set means you'll have to manually implement pagination. One row can represent multiple models.</li>
<li>You're adding a lot of code to manage that special collection of readings.</li>
</ul>
<h3>Using a raw query</h3>
<p>We can of course skip PHP and build the raw query to fully use the power of MySQL.
While this solves the performance issue, we're still working with a custom data set which can't make use of standard pagination.
Also, you're now maintaining a big SQL query somewhere in your code.
It's probably a string somewhere in PHP, or –slightly better– a separate sql file.</p>
<h3>Projecting the changes</h3>
<p>We could make a separte model called <code>MeterReadingReport</code>,
and use event hooks on <code>MeterReading</code> to manage these reports.</p>
<p>Every time a reading is added, we can get or create a report for that unit, day and user;
and update the data accordingly.</p>
<p>Now there's a separate model that's simple to query.
There's no more performance impact and the pagination issue is also solved.</p>
<p>But on the other hand, there's a lot more code to manage these event hooks.
Creating reports is one thing, but what if a reading is updated or deleted?
That's a lot of complexity we need to manage.</p>
<p>Projecting events into other models isn't a bad idea though.
It's one of the key features in event sourcing.
If you've got the right setup, making projectors would definitely be an option.</p>
<p>While we do have a package that handles this exact use case (<a href='https://github.com/spatie/laravel-event-projector' target='_blank' rel='noreferrer noopener'>laravel-event-projector</a>),
it seemed overkill for this use case;
especially since there are a lot of other &quot;normal&quot; models in this project.</p>
<h3>Finding the middle ground</h3>
<p>Looking at all the possible solutions, we can make a simple list of requirements:</p>
<ul>
<li>As less overhead as possible in the code base.</li>
<li>Good performance.</li>
<li>Be able to use the standard Laravel features without any workarounds.</li>
</ul>
<p>MySQL views are this perfect middle ground.
Let's look at how they are implemented.  </p>
<p><a name="impatient"></a></p>
<h2>SQL views in Laravel</h2>
<p>To work with a view, we'll have to first create a query that can build this view.
While many people are scared of SQL –modern ORMs made us way too lazy– I find it a lot of fun.</p>
<p>Beware that I'm no SQL master, so there might be things that could be done better.
I also won't explain what this query does exactly, as it'll be different for your use case.</p>
<p>In this case, it generates the table listed above. This is it:</p>
<pre class="language-sql"><code class="language-sql">SELECT 
    unit_id
    , user_id
    , DATE_FORMAT(`date`, '%Y-%m-%d') AS day
    , COUNT(CASE WHEN type = 'electricity' THEN type END) 
        AS `electricity`
    , COUNT(CASE WHEN type = 'water' THEN type END) 
        AS `water`
    , COUNT(CASE WHEN type = 'gas' THEN type END) 
        AS `gas`

FROM 
    meter_readings

GROUP BY
    unit_id
    , user_id
    , day
;</code></pre>
<p>It's very easy to build this query in your favourite SQL browser,
and afterwards plug it into your project.</p>
<p>How to plug it in, you ask? Very simple, with a migration. </p>
<pre class="language-php"><code class="language-php">public function up()
{
    DB::statement($this-&gt;dropView());

    DB::statement($this-&gt;createView());
}</code></pre>
<p>First of all, <code>dropView</code> is required, because Laravel only drops tables when doing a fresh migration.
It's as simple as this:</p>
<pre class="language-php"><code class="language-php">    private function dropView(): string
    {
        return &lt;&lt;&lt;SQL
DROP VIEW IF EXISTS `meter_reading_reports`;
SQL;
    }</code></pre>
<p>You notice I prefer Heredoc in these cases, a separate SQL file is of course equally good.</p>
<p>Michael Dyrynda pointed out to me that there's a <code>--drop-views</code> flag you can pass to the migrate command.
So, technically, this manual dropping isn't required.
I prefer this way though, because now we don't have to remember to add the extra flag. </p>
<p>Next up, the <code>createView</code> method returns the query, with some added syntax.
I've shortened the sample a bit, but you get the point.</p>
<pre class="language-php"><code class="language-php">    private function createView(): string
    {
        return &lt;&lt;&lt;SQL
CREATE VIEW `meter_reading_reports` AS

SELECT /* … The query */
SQL;
    }</code></pre>
<p>Sidenote: I'm very much looking forward to PHP 7.3 and <a href='/blog/new-in-php-73' target='_blank' rel='noreferrer noopener'>flexible Heredoc syntax</a>.</p>
<p>Now that we have a migration in place, all else just works like normal Laravel!</p>
<pre class="language-php"><code class="language-php">class MeterReadingReport extends Model
{
    protected $casts = [
        'day' =&gt; 'date',
    ];

    public function unit(): BelongsTo
    {
        return $this-&gt;belongsTo(Unit::class);
    }

    public function user(): BelongsTo
    {
        return $this-&gt;belongsTo(User::class);
    }
}</code></pre>
<p>We're using a simple model, without any workarounds whatsoever.
Relations work just like normal, casting like you're used to,
pagination works like it should be, and there no more performance impact.</p>
<p>The only thing that's not possible is of course writing to a view.
It is actually possible to do it in MySQL, but completely irrelevant to our use case. </p>
<p>Maybe you can already see some use cases where MySQL views might be useful?
Maybe you have a followup question or remark?
I'd love to hear from you!
You can reach me on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-08-27T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ The web in 2045 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/the-web-in-2045"/>

        <id>https://www.stitcher.io/blog/the-web-in-2045</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>On August 6 1991, Sir Tim Berners-Lee put the world's first website online.
It's been 27 years since that first website has been reachable via the world wide web.
With the massive progression we've seen throughout the web's lifetime,
I can't help but wonder what will happen in the next 27 years, what the web will look like in 2045.</p>
<h2>A brief history</h2>
<p>What better way to know the future, than to look at the past?
There's an excellent blog called &quot;<a href='https://thehistoryoftheweb.com/archives/' target='_blank' rel='noreferrer noopener'>The History Of The Web</a>&quot;.
Thanks to Jay Hoffman, the writer of the blog,
I've been fascinated by the roots of the web.</p>
<p>On August 6, 1991 Tim Berners-Lee puts the first website online.
A few months later, on October 29 of the same year,
the first HTML draft is posted on the <em>www-talk</em> mailing list.</p>
<p>Three years went by until Netscape Navigator, the most popular browser at the time,
was released on October 13, 1994.
It took Microsoft almost a year longer to release their own Internet Explorer 1 on August 15 of 1995.
In December of 1996, the first iteration for CSS was conceptualised.</p>
<p>Mozilla released Firefox more than ten years after the beginning of the web in 2004.
Only a few years later, Apple flipped the web to its mobile side
by presenting the very first iPhone on January 8, 2007.</p>
<p>Twenty-three years after the first mention of HTML
modern websites found their identity as we know it today,
when HTML5 was made the formal recommendation by the W3C on October 28, 2014. </p>
<p>It's amazing to see how the web has evolved in less than three decades.
Not only its technical boundaries were pushed;
people also kept finding innovating ways for what the technology was used for.
Think about sites like GeoCities or NeoPets; the first blog post written in <em>1997</em>;
or some recent examples like <a href='https://i.redd.it/agcbmqgjn14z.png' target='_blank' rel='noreferrer noopener'>/r/place</a> on Reddit
and an experience beyond words crafted by <a href='https://www.sbnation.com/a/17776-football' target='_blank' rel='noreferrer noopener'>SB Nation</a>.</p>
<h2>Today</h2>
<p>While the web's primary focus was to distribute content,
its users have shaped it into a completely different, broader platform.</p>
<p>It's only in more recent years that we've been able to observe – and be part of –
the unique phenomenon of the JavaScript world.
While the language has been around since the nineties,
it were frameworks like Ember, Backbone and Angular that opened a whole new area the web could grow in.</p>
<p>It's impossible to pinpoint an exact date on when people started looking at JavaScript as something more
than a simple scripting language. But there are a few milestones worth mentioning.</p>
<ul>
<li>jQuery's initial release in August, 2006.</li>
<li>AngularJS was released in October, 2010.</li>
<li>React saw the light in March, 2013.</li>
</ul>
<p>Especially with the modern frameworks, better syntax was required;
and projects like Babel came into view.
This is where it starts to get real interesting: JavaScript in the browser becoming a compilation target,
for <em>other</em> languages and supersets.</p>
<p>Gary Bernhardt, a well known public speaker;
said that, in order for JavaScript to become as successful as it is today,
it had to really suck.
It's only then that people start investing in alternatives.
And when JavaScript is the <em>only</em> thing that runs in the browsers,
people are really forced to think out of the box.</p>
<p>With the arrival of frontend frameworks in JavaScript,
people needed to start investing in performance.
On the one hand, browser vendors are doing amazing things with their JavaScript engines.
On the other hand, one of the most creative, out of the box thinking solutions;
must have been asm.js. </p>
<p>Here you have an optimised subset of JavaScript; being able to run, for example, a 3D game engine—in the browser.
With asm.js, and Web Assembly following; web technologies can be used for yet another, completely different goal. </p>
<p>It begs the question: &quot;what is the web?&quot;</p>
<p>The technologies the web was built upon: HTTP, HTML, CSS and JavaScript,
became technologies to make applications and games;
some of the programs we use to build the web,
are built on these same technologies themselves.</p>
<p>Does &quot;the web today&quot; refer to all these technologies and creations,
or just a collection of connected documents, built on top of the same technologies?
Is the browser's goal still just that: browsing documents;
or has it become a platform for all kinds of things, whatever we can imagine? </p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>2045</h2>
<p>With the web advancing so fast,
one can only wonder what it will look like a few decades from now.</p>
<p>One of the key changes could be the sandbox we're all using today: the browser.
Will applications stay confined to that browser window,
or will they break free and live as first-class programs on your operating system?</p>
<p>The mobile world is already moving in this direction with progressive web apps.
Chrome OS was completely built on top of the web, independent of the browser.
But, some might argue, it was too ahead of its time.</p>
<p>Imagine a world where web apps can be &quot;installed&quot; via an app store;
where you don't need bookmarks or URLs anymore, but simply open an app, like we open the browser today.
Obviously, being built on top of the web; these apps don't need to be installed, they just work, everywhere.</p>
<p>Imagine JavaScript and DOM engines baked into operating systems.
No more Electron or Java for easy cross-platform programming.
All programs can be shared, everything will be interconnected.</p>
<p>And once all that is achieved, someone will come along, claiming a new invention:
a simple web app for browsing and sharing content…</p>
<hr />
<p>Hi, thanks for reading! What's your view for the web in 2045?
Feel free to share your thoughts on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>,
I'd love to chat!</p>
<p>And if you're reading this in 2045:
what's your opinion on this blog post, looking back?
Where will the web be in, say, another 27 years?</p> ]]></summary>

        <updated>2018-08-15T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Service locator: an anti-pattern ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/service-locator-anti-pattern"/>

        <id>https://www.stitcher.io/blog/service-locator-anti-pattern</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>As a Laravel developer, I'm confronted daily with the service locator pattern.
Every facade call and several helper functions are built upon it.</p>
<p>Let's take a look at a common facade call: <code>Auth::user()</code>.
The <code>Auth</code> facade will reach into Laravel's service container, grab the registered component,
and forward the static call to that component.
In this case, it'll return the logged in user.</p>
<p>During a discussion with my colleagues, I found it difficult to put into words
what exactly is wrong with grabbing things out of the container –a service locator– so I decided to write my thoughts down,
with an example: a class <code>CreatePostAction</code> which is tasked to create a blog post,
based on a set of parameters.</p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body
    ): Post
    {
        return Post::create([
            'title' =&gt; $title,
            'body' =&gt; $body,
            'author_id' =&gt; Auth::user()-&gt;id,
        ]);
    }
}</code></pre>
<p>I want to highlight three problems with this approach, directly caused by the use of a service locator.</p>
<ul>
<li>There's a bigger chance of runtime errors.</li>
<li>The code is obfuscated to the outside.</li>
<li>It increases cognitive load.</li>
</ul>
<p>Let's look at these examples, one by one.</p>
<h2>Runtime- instead of compile time errors</h2>
<p>Before even looking at this first argument, there's one assumption I'll make.
That is that, as a developer, you prefer to know bugs in your code as early as possible,
so that you can fix them as early as possible.</p>
<p>I'll assume that you don't like a situation where a client tells you a production project is broken,
and the issue can only be reproduced by taking several steps.</p>
<p>As the name says, runtime errors can only be discovered by running the program.
Truth be told: PHP, being an interpreted language; highly leans towards these kind of errors.
You cannot know if a PHP program will work before running it.</p>
<p>There's nothing wrong with that, but my argument here is that every place we can
avoid these errors, we should. </p>
<p>Compile time errors are errors that can be detected without running the code.
For example: in your IDE or using a static analysis tool.
The benefit is that you know a piece of code will absolutely work,
even without testing it.</p>
<p>Let's put that into practice. What does <code>Auth::user()</code> return?
A logged in <code>User</code>—most of the time.</p>
<p>Our action class doesn't know anything about the system it lives in,
except the things we tell it.
This means that, when calling <code>Auth::user()-&gt;id</code>,
we assume that the surrounding system has a logged in user, with an <code>id</code>.</p>
<p>Of course, your first thought is that we <em>know</em> there's a user,
because this action is called within a controller that requires a logged in user.
I'll come back to that argument later.</p>
<p>For now, speaking from a mathematical point of view,
it's impossible to prove if <code>Auth::user()-&gt;id</code> will work, without running it.
There are two ways to fix it, from the action's perspective.</p>
<p>By doing a runtime check:</p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body
    ): Post
    {
        if (! Auth::user()) {
            throw new Exception('...');
        }

        // ...
    }
}</code></pre>
<p>Or by requiring a valid user, before executing:</p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body,
        User $author
    ): Post
    {
        // ...
    }
}</code></pre>
<p>I <em>know</em> you have arguments why this will never happen and I shouldn't be worried about it;
I'll address those arguments soon.</p>
<h2>Obfuscated classes</h2>
<p>Before looking at the biggest argument, how service locators affect cognitive load;
there's the argument about obfuscated classes.
Let's look at our action's definition.</p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body
    ): Post
    { /* ... */ }
}</code></pre>
<p>I've blogged and spoken about this a lot already:
developers don't read every line of code, they scan it.</p>
<p>At the time of writing the code, it all seems obvious:
you <em>know</em> a blog post requires a logged in user.
However, for the developer working in your legacy code, that intent is not clear.
Not unless he's reading every single line of code.</p>
<p>Imagine being that person: having to work in a legacy project where you need to read every single line of code,
in order to get the general idea of what's happening.</p>
<p>You might as well not be interested in the specifics of how a post is created,
you just want to know what's required to do so.
There's two ways to solve this issue. </p>
<p>Either be using docblocks;
meaning a lot more work for both the author and reader, and it clutters your code: </p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    /**
     * This action will create a post, 
     * and attach the logged in user as its author.
     *
     * @param string $title
     * @param string $body
     *
     * @return Post
     */
    public function __invoke(
        string $title, 
        string $body
    ): Post
    { /* ... */ }
}</code></pre>
<p>Or by injecting the user:</p>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body,
        User $author
    ): Post
    { /* ... */ }
}</code></pre>
<p>Which one do you prefer?
Remember: from the perspective of the person working in a legacy project,
and it's not just one class, there are dozens and dozens.</p>
<h2>Increased cognitive load</h2>
<p>This all leads up to the final, and major, argument: cognitive load.
I already wrote a lot on this topic, and I'll share some links at the end of this post.</p>
<p>The important question, which probably counters most of the arguments for service locators;
is how much brain effort you, the developer, has to spend on trivial questions like:</p>
<blockquote>
<p>How sure am I this code will actually work?</p>
</blockquote>
<p>Let's look at the most basic example: <code>Auth::user()-&gt;id</code>.
I work on Laravel projects and admit to have used this piece of code numerous times.
Here's a non-exhaustive list of questions popping into my head when writing this code:</p>
<ul>
<li>Am I sure a user is logged in at this point?</li>
<li>Should I add an extra check, to be sure?</li>
<li>What context will this method be called from?</li>
<li>Are there any future features in the project's scope I need to take into account?</li>
<li>Should I add a test to be sure this never breaks in the future?</li>
</ul>
<p>These are all such trivial questions,
and I need to think about them <strong>every time I use a facade</strong>.
How much more easy is it to simply say:</p>
<blockquote>
<p>I <strong>need</strong> the logged in user to do this action, and the context calling this action can figure it out from there.</p>
</blockquote>
<pre class="language-php"><code class="language-php">class CreatePostAction
{
    public function __invoke(
        string $title, 
        string $body,
        User $author
    ): Post
    { /* ... */ }
}</code></pre>
<p>Sure, compile time errors and less code are always nice,
but my main problem is this cognitive load.
I don't want to ask all these questions every time I use a facade.</p>
<p>Seasoned Laravel developers will tell me this is the way the frameworks works and we should embrace it.
They are right, of course.
But making the assumption that &quot;it will work&quot; isn't good enough to me.
At least, it's no argument against increased cognitive load,
as you're still left with a lot of questions about the surrounding context.</p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>Dependency injection solves it</h2>
<p>Dependency injection, of course; fixes this.
It's a pattern which allows for inversion of control and clarifies intent.
It's also perfectly possible to do proper DI in Laravel;
and, in my opinion, we should do it more.</p>
<p>I've written about DI before, feel free to read up on it <a href="/blog/dependency-injection-for-beginners">here</a>.
I also recently gave a talk about cognitive load, from a visual perspective.
You can find it <a href="/blog/visual-perception-of-code">here</a>.</p> ]]></summary>

        <updated>2018-08-10T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ The Visual Perception of Code ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/visual-perception-of-code"/>

        <id>https://www.stitcher.io/blog/visual-perception-of-code</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>How do we read code? Are there things we can do to make that reading more easy?
I recently gave a talk about this exact topic.</p>
<p>In this talk, I gave six pointers to improve this visual perception,
to make it easier to read your own code: fonts, code folding, colours, patterns, documentation and names.</p>
<p>These are the links mentioned in the video:</p>
<ul>
<li><a href="/blog/a-programmers-cognitive-load">A programmer's cognitive load</a></li>
<li><a href="/blog/mastering-key-bindings">Mastering key bindings</a></li>
<li><a href="/blog/where-a-curly-bracket-belongs">Where a curly bracket belongs</a></li>
</ul>
<p>The colour scheme used is a port of Mozilla's Photon Light theme.
Here's the <a href='https://github.com/brendt/photon-light' target='_blank' rel='noreferrer noopener'>PHPStorm version</a>.</p>
<p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/rDMI1dpNfdw?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
</p>
<p>I you have any thoughts coming to mind, if you want to discuss this further
or tell me I'm wrong;
you can reach me on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-06-09T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Scopes in PHPStorm ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/phpstorm-scopes"/>

        <id>https://www.stitcher.io/blog/phpstorm-scopes</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Scopes in PHPStorm can significantly improve your development experience.
They enable better search and allow for custom file colours. </p>
<p>For example, this is what I'm talking about:</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tree-view.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tree-view-646x1043.png 646w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-372x600.png 372w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-527x851.png 527w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-834x1347.png 834w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-745x1203.png 745w" sizes="" alt="A tree view configured with coloured scopes" /></p>
<p>These colours allow you to easily recognise files,
and that in turn allows you to think more freely about things that really matter when coding.</p>
<p>First you'll want to configure one or more scopes.
A scope is a set of textual filters that are applied on your files.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-883x362.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1262x432.png 1262w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1530x628.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1546x529.png 1546w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1785x611.png 1785w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-892x305.png 892w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1249x513.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1976x812.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1996x684.png 1996w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1767x726.png 0w" sizes="" alt="Configuring scopes 1" /></p>
<p>You can use the buttons to include and exclude folders and files,
or you can write the filters yourself.
There's a special syntax, described <a href='https://www.jetbrains.com/help/phpstorm/scope-language-syntax-reference.html' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<p>Don't forget you can expand the text area for easier configuration.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-883x362.png 883w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1530x628.png 1530w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1249x513.png 1249w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1976x812.png 1976w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1767x726.png 1767w" sizes="" alt="Configuring scopes 2" /></p>
<h2>File colours</h2>
<p>Every scope can be applied a specific colour.
This makes it easy to easily spot files. </p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/file-colours.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/file-colours-1249x489.png 1249w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1976x774.png 1976w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1530x599.png 1530w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1767x692.png 1767w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-883x345.png 883w" sizes="" alt="File colours" /></p>
<p>By applying colours to a scope, you'll see them in the tree view,
in file tabs and when using file navigation.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tab-colours.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tab-colours-1402x49.png 1402w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-1214x42.png 1214w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-1568x54.png 1568w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-991x34.png 991w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-701x24.png 701w" sizes="" alt="File colours" /></p>
<h2>Filtering by scope</h2>
<p>Besides colours, scopes also allow for easy filtering. For example, in the tree view.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tree-filter.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tree-filter-1044x556.png 1044w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-466x248.png 466w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-660x351.png 660w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-933x496.png 933w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-808x430.png 808w" sizes="" alt="File colours" /></p>
<p>But also in the finder.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/finder.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/finder-1620x438.png 1620w, /resources/img/blog/phpstorm-coloured-scopes/finder-935x252.png 935w, /resources/img/blog/phpstorm-coloured-scopes/finder-1323x357.png 1323w, /resources/img/blog/phpstorm-coloured-scopes/finder-1871x506.png 1871w, /resources/img/blog/phpstorm-coloured-scopes/finder-2092x566.png 2092w" sizes="" alt="File colours" /></p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>Defaults</h2>
<p>Setting up scopes shouldn't take longer than 10 minutes every project,
and saves a lot of time in the long run. </p>
<p>PHPStorm also offers a default settings option though,
which will be used every every time you create a new project.
Go to <code>File &gt; Default Settings</code> and configure your default scopes and colours over there.</p>
<footer>
    <nav class="spacer">
        <a href="/blog/phpstorm-tips-for-power-users" class="cta">Read even more PHPStorm tips</a>
    </nav>
</footer> ]]></summary>

        <updated>2018-06-07T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Acquisition by giants ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/acquisition-by-giants"/>

        <id>https://www.stitcher.io/blog/acquisition-by-giants</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Yesterday, Microsoft acquired GitHub.
I don't think GitHub is in any immediate danger of becoming obsolete or feature bloated.
But we should think about what this acquisition, one of many; means.</p>
<p>I say many, because GitHub isn't by far Microsoft's first big acquisition.
Think of Skype and Nokia a few years back, or Linkedin and Minecraft more recently.
Who can blame them?
It's only natural that a company continues to look for ways to improve their market footprint,
especially in the tech world.</p>
<p>But now what? GitHub becomes one of the many products swallowed by tech giants.
It will become even more difficult for smaller products to stand a competing chance.
Should we, the tech industry, be worried about big monopolies growing larger and larger?</p>
<h2>Embrace, extend, and extinguish</h2>
<p>What better way to look at the future, than to look at the past?
Many will say Microsoft isn't deploying their &quot;embrace, extend, and extinguish&quot; strategy anymore;
but are they?</p>
<p>Here's what this strategy means, from <a href='https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish' target='_blank' rel='noreferrer noopener'>wikipedia</a>.</p>
<ul>
<li>Embrace: Development of software substantially compatible with a competing product,
or implementing a public standard.</li>
<li>Extend: Addition and promotion of features not supported by the competing product or part of the standard,
creating interoperability problems for customers who try to use the 'simple' standard.</li>
<li>Extinguish: When extensions become a de facto standard because of their dominant market share,
they marginalize competitors that do not or cannot support the new extensions.</li>
</ul>
<p>It sounds like a smart strategy.
It may not be called like this anymore but it seems reasonable that,
if Microsoft still wants to grow; they must look at how to outgrow their competitors.</p>
<p>We've seen them <strong>embracing</strong> a lot of technologies and platforms recently.
Think of open sourcing .NET, developing VSCode, embedding Linux etc.
Microsoft is doing a lot of good for the open source community lately,
but you can't help but think they are also serving their own agenda while at it.</p>
<p>It's only guessing what Microsoft will do to <strong>extend</strong> GitHub,
but we've already seen a lot of nice features added to other acquired products.
Growing them to, indeed, part of the standard. </p>
<p>Let's not forget the obvious example though: VSCode, a direct competitor to GitHub's Atom editor.
Both are built on the same technology: Electron, managed by GitHub.</p>
<p>So will the tech community allow a giant to <strong>extinguish</strong> all its competitors?
Time will tell.</p>
<h2>The drive for innovation</h2>
<p>Thinking back 20 years ago, the browser wars were raging.
There was a lot of competition, and with that competition came innovation.
We must not forget that it was this period of rivalry between many different players,
that lead to the web platform we have today.
And it's a platform that grew beyond the wildest expectations of these first pioneers.</p>
<p>So we must wonder: what if there's less and less competition in the tech world?
What if the giants, Microsoft, Apple, Amazon, Google and Facebook; only grow larger and larger?
What does it mean for innovation?</p>
<p>It's worrisome to see that in the startup culture,
it's actually one of the biggest questions right at the beginning: &quot;what's our exit strategy?&quot;
The goal of almost every startup, from the start, is to be absorbed by a bigger company, in just a few years.</p>
<p>The drive for innovation gets replaced by the need for money.
But we cannot afford stagnation.
We must be aware that this, still very young, industry
has very large odds of becoming the same as so many others.</p>
<p>To me, these are the thoughts behind GitHub's acquisition.
And yes, they are scary.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-06-05T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Liskov and type safety ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/liskov-and-type-safety"/>

        <id>https://www.stitcher.io/blog/liskov-and-type-safety</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>I've been fascinated by type systems in programming languages for a while now.
Recently, something clicked for me about inheritance and types.</p>
<p>Not only did it clarify type variance,
I also understood what the Liskov substitution principle actually is about.
Today, I'm going to share these insights with you.</p>
<h2>Prerequisites</h2>
<p>I'll be writing pseudo code to make clear what I'm talking about.
So let's make sure you know what the syntax of this pseudo code will be.</p>
<p>A function is defined like so.</p>
<pre class="language-txt"><code class="language-txt">foo(T) : void

bar(S) : T</code></pre>
<p>First comes the function name, second the argument list with types as parameters,
and finally the return type.
When a function returns nothing, it's indicated as <code>void</code>.</p>
<p>A function can extend another function, as can types.
Inheritance is defined like so. </p>
<pre class="language-txt"><code class="language-txt">bar &gt; baz(S) : T

T &gt; S</code></pre>
<p>In this example, <code>baz</code> extends <code>bar</code>, and <code>S</code> is a subtype of <code>T</code>.
The last step is being able to invoke the function, which is done like so.</p>
<pre class="language-txt"><code class="language-txt">foo(T)

a = bar(S)</code></pre>
<p>Once again: it's all pseudo code and I'll use it to show what types are,
how they can and cannot be defined in combination with inheritance, and
how this results in type-safe systems.</p>
<h2>Liskov substitution principle</h2>
<p>Let's look at the official definition of the LSP.</p>
<blockquote>
<p>If <code>S</code> is a subtype of <code>T</code>, then objects of type <code>T</code> may be replaced with objects of type <code>S</code>
<br>—<a href='https://en.wikipedia.org/wiki/Liskov_substitution_principle' target='_blank' rel='noreferrer noopener'>Wikipedia</a></p>
</blockquote>
<p>Instead of using <code>S</code> and <code>T</code>, I'll be using more concrete types in my examples.</p>
<pre class="language-txt"><code class="language-txt">Organism &gt; Animal &gt; Cat</code></pre>
<p>These are the three types we'll be working with.
Liskov tells us that wherever objects of type <code>Organism</code> appear in our code,
they must be replaceable by subtypes like <code>Animal</code> or <code>Cat</code>. </p>
<p>Let's say there's a function used to <code>feed</code> an <code>Organism</code>. </p>
<pre class="language-txt"><code class="language-txt">feed(Organism) : void</code></pre>
<p>It must be possible to call it like so:</p>
<pre class="language-txt"><code class="language-txt">feed(Animal)
feed(Cat)</code></pre>
<p>I tend to see a function definition as a contract, a promise; for the programmer to be used.
The contract states:</p>
<blockquote>
<p>Given an object of the type <code>Organism</code>,
I'll be able to execute and <code>feed</code> that <code>Organism</code>.</p>
</blockquote>
<p>Because <code>Animal</code> and <code>Cat</code> are subtypes of <code>Organism</code>,
the LSP states that this function should also work when one of these subtypes are used. </p>
<p>This brings us to one of the key properties of inheritance.
If Liskov states that objects of type <code>Organism</code> must be replaceable by objects of type <code>Animal</code>,
it means that <code>Animal</code> may not change the expectations we have of <code>Organism</code>.
<code>Animal</code> may extend <code>Organism</code>, meaning it may <em>add</em> functionality,
but <code>Animal</code> may not change the certainties given by <code>Organism</code>.</p>
<p>This is where many OO programmers make mistakes.
They see inheritance more like
&quot;re-using parts of the parent type, and overriding other parts in the sub-type&quot;,
rather than extending the behaviour defined by its parent.
This is what the LSP guards against.</p>
<h2>Benefits of the LSP</h2>
<p>Before exploring the details of type safety with inheritance,
we should stop and ask ourselves what's to gain by following this principle.
I've explained what Barbara Liskov meant when she defined it,
but why is it necessary? Is it bad to break it?</p>
<p>I mentioned the idea of a &quot;promise&quot; or &quot;contract&quot;.
If a function or type makes a promise about what it can do,
we should be able to blindly trust it.
If we can't rely on function <code>feed</code> being able to feed all <code>Organisms</code>,
there's a piece of undocumented behaviour in our code.</p>
<p>If we know that the LSP is respected, there's a level of security.
We may trust that this function will do the thing we expect;
even without looking at the implementation of that function.
When the contract is breached, however; there's a chance of runtime errors
that both the programmer and the compiler could not –or did not– anticipate for.</p>
<p>In the above examples, we looked at respecting the LSP form the developer's point of view.
There's another party involved though: a language's type system.
A language can be designed in a type-safe way or not.
Types are the building blocks to mathematically proof whether a function will do the thing you want it to do.</p>
<p>So, next up; we're going to look at the other side: type-safety on the language level.</p>
<h2>Type safety</h2>
<p>To understand how type safety can –or cannot– be guaranteed by a language,
let's look at these functions. </p>
<pre class="language-php"><code class="language-php">take_care(Animal) : void

take_care &gt; feed(Animal) : void</code></pre>
<p>As you can see, <code>feed</code> extends <code>take_care</code> and follows its parent signature one-to-one.
Some programming languages don't allow children to change the type signature of their parent.
This is called type invariance.</p>
<p>It's the easiest approach to handle type safety with inheritance,
as types are not allowed to <em>vary</em> when inheriting.</p>
<p>But when you think back at how our example types are related to each other,
we know that <code>Cat</code> extends <code>Animal</code>.
Let's see whether the following is possible.</p>
<pre class="language-txt"><code class="language-txt">take_care(Animal) : void

take_care &gt; feed(Cat) : void</code></pre>
<p>The LSP only defines rules about objects, so on first sight, the function definition itself doesn't break any rules.
The real question is: does this function allow for proper use of the LSP when it's called?</p>
<p>We know that <code>feed</code> extends from <code>take_care</code>, and thus provides at least the same contract as its parent.
We also know that <code>take_care</code> allows <code>Animal</code> and its sub-types to be used.
So <code>feed</code> should also be able to take an <code>Animal</code> type.</p>
<pre class="language-txt"><code class="language-txt">feed(Animal)

// Type error</code></pre>
<p>Unfortunately, this is not the case. There's a type error occurring.
Can you see what we're doing here?
Instead of applying the LSP only to the parameters of a function,
we're also applying the same principles to the function itself.</p>
<blockquote>
<p>Wherever an invocation of <code>take_care</code> is used, we must be able to replace it
with an invocation of <code>feed</code>.</p>
</blockquote>
<p>This especially makes sense in an OO language where a function is no standalone entity in your code,
but rather part of a class, which represents a type itself.</p>
<p>To keep a system type-safe, it may not allow children to make the parameter types more specific.
This breaks the promises given by the parent.</p>
<p>However, take a look at the following definition:</p>
<pre class="language-txt"><code class="language-txt">take_care(Animal) : void

take_care &gt; feed(Organism) : void</code></pre>
<p>Does this definition ensures type safety?
It may seem backwards at first, but it does.
<code>feed</code> still follows the contract specified by <code>take_care</code>.
It can take <code>Animal</code> as an argument, and work just fine.</p>
<p>In this case, <code>feed</code> widens the parameter types allowed,
while still respecting the parent's contract.
This is called contravariance.
Types in argument lists should be contravariant for a type system to be safe.</p>
<h2>Return type variance</h2>
<p>Moving on to return types.
There are a few more types we'll have to define, in order for the examples to make sense.
I'm sorry in advance for the choice of words!</p>
<pre class="language-txt"><code class="language-txt">Excretion &gt; Poop</code></pre>
<p>And these are the functions we're working with. </p>
<pre class="language-txt"><code class="language-txt">take_care(Animal) : Excretion

take_care &gt; feed(Animal) : Poop</code></pre>
<p>The question now: is the overridden return type safe?
In contrast to the contravariance for the argument list,
this example actually is type safe!</p>
<p>The parent definition <code>take_care</code> tells us that this function will always return
an object of type <code>Excretion</code>. </p>
<pre class="language-txt"><code class="language-txt">excretion = take_care(Animal)

excretion = feed(Animal)</code></pre>
<p>Because <code>Poop</code> is a subtype of <code>Excretion</code>, we can be a 100% sure that whatever <code>feed</code> returns,
it will be within the category of <code>Excretion</code>.</p>
<p>You see the opposite rule applies for return types compared to function parameters.
In the case of return types, we're calling it covariance, or covariant types.</p>
<h2>Real-life impact</h2>
<p>There' no guarantee that a type-safe language will always write a bug-free program.
We've seen that the language design only carries half the responsibility of respecting the LSP.
The other half is the programmer's task.</p>
<p>Languages differ though, all have their own type system,
and each will have a different level of type safety.</p>
<p>Eiffel, for example, allows for parameter covariance.
By now you know this means there's an area of wrong behaviour possible that's undetectable by the compiler.
Hence there's the possibility of runtime errors.</p>
<p>PHP allows for constructors of child classes to have another signature,
while keeping an invariant type system for all other functions.
As with many things PHP, this inconsistency increases the confusion for developers.</p>
<p>Some languages like Java, C# and Rust have a concept that I didn't cover today: generics.
Type variance also plays a big role there.
That topic is out of scope for this blog post, but I might cover it in the future.</p>
<p>With all these differences, there's one thing to keep in mind.
The safety of a type system doesn't mean a language is better or worse.
I think it's fair to say that some cases would benefit from a very strong type system,
while others need the exact opposite.
The key takeaway is that every programmer
should learn more than just the concepts and paradigms of the languages they are used to the most.
A broadened view will be beneficial, now and in the future.</p>
<p>So what's your opinion on type safety?
If you're up for it, I'd love to talk about it even more:
you can reach me on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-05-19T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Dependency injection for beginners ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/dependency-injection-for-beginners"/>

        <id>https://www.stitcher.io/blog/dependency-injection-for-beginners</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>You're in the car business,
your job is to make cars on-demand.
The object-oriented programmer in you says:
&quot;no problem, I'll make a blueprint that I can use to make as many cars as I want!&quot;.</p>
<pre class="language-php"><code class="language-php">class Car
{
    public function drive()
    {
        // ...
    }
}</code></pre>
<p>For this car to work, it needs an engine and wheels.
Now, there are several approaches to achieve that goal.
You could, for example, do the following:</p>
<pre class="language-php"><code class="language-php">class Car
{
    public function __construct()
    {
        $this-&gt;engine = new Engine();

        $this-&gt;wheels = [
            new Wheel(), new Wheel(), 
            new Wheel(), new Wheel(),
        ];
    }

    public function drive() { ... }
}</code></pre>
<p>There's the blueprint for every car you'll make!
Next up, your boss comes to you and says there's a new client and he wants an electric car.</p>
<p>So you end up doing this.</p>
<pre class="language-php"><code class="language-php">class ElectricCar extends Car
{
    public function __construct()
    {
        parent::__construct();

        $this-&gt;engine = new ElectricEngine();
    }
}</code></pre>
<p>&quot;Beautifully solved&quot;—you think.
There's of course that redundant normal engine that's created when calling <code>parent::__construct()</code>,
but at least you could re-use the wheels!</p>
<p>I think you can see where this is going.
The next client wants a car with some fancy wheel covers,
another one would like a diesel engine with those same wheel covers,
another one requests a race car,
and the last one wants a self driving car.
<br>
Oh—there also was a client who wanted to buy an engine to build a boat with himself,
but you told your boss that wouldn't be possible.</p>
<p>After a while, there's a ton of blueprints in your office,
each describing a very specific variation of a car.
You started with a neatly ordered pile of blueprints.
But after a while you had to group them in different folders and boxes,
because it was taking too long to find the blueprint you're looking for.</p>
<p>Object oriented programmers often fall into this trap of inheritance,
ending in a completely messed up codebase.
So let's look at a better approach.
Maybe you've heard about &quot;composition over inheritance&quot; before? </p>
<blockquote>
<p>Composition over inheritance is the principle that classes should achieve polymorphic behavior
and code reuse by their composition rather than inheritance from a base or parent class—<a href='https://en.wikipedia.org/wiki/Composition_over_inheritance' target='_blank' rel='noreferrer noopener'>Wikipedia</a></p>
</blockquote>
<p>That's a lot of buzzwords. Let's just look at our car example.
The principle states that <code>Car</code> should achieve its polymorphic behaviour
by being composed of other classes.</p>
<p>The word <em>polymorphic</em> literally means &quot;many shapes&quot;
and implies that <code>Car</code> should be able to do <code>drive</code> in many different ways,
depending on the context it's used in.</p>
<p>With <em>code reuse</em>, we're trying to make code reusable;
so that we don't end up with tens of classes doing almost exectly the same.</p>
<h2>What does this have to do with dependency injection?</h2>
<p>Instead of making a unique blueprint that describes every single possible variation of a car,
we'd rather have <code>Car</code> do one thing, and do it good: drive.</p>
<p>This means it shouldn't be the car's concern how its engine is built,
what wheels it has attached.
It should only know the following thing:</p>
<blockquote>
<p>Given a working engine and four wheels, I'm able to drive!</p>
</blockquote>
<p>We could say that in order for <code>Car</code> to work, it <em>needs</em> an engine and wheels.
In other words: <code>Car</code> depends on <code>Engine</code> and a collection of <code>Wheels</code>.</p>
<p>Those dependencies should be <em>given</em> to the car. Or, said otherwise: injected.</p>
<pre class="language-php"><code class="language-php">class Car
{
    public function __construct(
        Engine $engine, 
        array $wheels
    ) {
        $this-&gt;engine = $engine;
        $this-&gt;wheels = $wheels;
    }

    public function drive()
    {
        $this-&gt;engine-&gt;connectTo($this-&gt;wheels);

        $this-&gt;engine-&gt;start();

        $this-&gt;engine-&gt;accelerate();
    }
}</code></pre>
<p>Would you like a race car? No problem!</p>
<pre class="language-php"><code class="language-php">$raceCar = new Car(new TurboEngine(), [
    new RacingWheel(), new RacingWheel(),
    new RacingWheel(), new RacingWheel(),
]);</code></pre>
<p>That client who wanted special wheel covers? You've got that covered!</p>
<pre class="language-php"><code class="language-php">$smugCar = new Car(new Engine(), [
    new FancyWheel(), new FancyWheel(),
    new FancyWheel(), new FancyWheel(),
]);</code></pre>
<p>You've got <em>a lot</em> more flexibility now!</p>
<p>Dependency injection is the idea of giving a class its requirements from the outside,
instead of having that class being responsible for them itself.</p>
<h2>What dependency injection is not</h2>
<p>Built upon this simple principle, there are frameworks and tools that take it to the next level.
You might, for example, have heard about the following things before.</p>
<h3>Shared dependencies</h3>
<p>One of the most beneficial side effects of injecting dependencies,
is that the outside context can control them.
This means that you can give the same instance of a class
to several others that have a dependency on that class.</p>
<p>Shared- or reusable dependencies are the ones most often getting the label &quot;dependency injection&quot;.
Though it's certainly a very good practice,
sharing a dependency is not actually the core meaning of dependency injection. </p>
<h3>The dependency container</h3>
<p>Sometimes it's also called &quot;inversion of control&quot; container, though that's not an accurate name.</p>
<p>Whatever the exact name, the container is a set of class definitions.
It's a big box that knows how objects in your application can be constructed with other dependencies.
While such a container definitely has a lot of use cases, it's not necessary to do dependency injection.</p>
<h3>Auto wiring</h3>
<p>To give developers even more flexibility, some containers allow
for smart, automatically determined, class definitions.
This means you don't have to manually describe how every class should be constructed.
These containers will scan your code, and determine which dependencies are needed
by looking at type hints and doc blocks.</p>
<p>A lot of magic happens here, but auto wiring can be a useful tool for rapid application development.</p>
<h3>Service location</h3>
<p>Instead of injecting dependencies into a class,
there are some tools and frameworks that allow a class to ask the container
to &quot;give it an instance of another class&quot;. </p>
<p>This might seem beneficial at first,
because our class doesn't need to know how to construct a certain dependency anymore.
However: by allowing a class to ask for dependencies on its own account,
we're back to square one. </p>
<p>For service location to work, our class needs to know about the systems on the outside.
It doesn't differ a lot from calling <code>new</code> in the class itself.
This idea is actually the opposite of what dependency injection tries to achieve.
It's a misuse of what the container is meant to do.</p>
<h3>Inject everything</h3>
<p>As it goes in real-life projects, you'll notice that dependency injection
in not <em>always</em> the solution for your problem.</p>
<p>It's important to realise that there's limits to the benefits of everything.
You should always be alert that you're not taking this to the extreme,
as there are valid cases in which a pragmatic approach <em>is</em> the better solution.   </p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>In closing</h2>
<p>The core idea behind dependency injection is very simple,
yet allows for better maintainable, testable and decoupled code to be written. </p>
<p>Because it's such a powerful pattern,
it's only natural that lots of tools emerge around it.
I believe it's a good thing to first understand the underlying principle,
before using the tools built upon it.
And I hope this blog post has helped with that.</p>
<p>If there are any thoughts coming to your mind that you want to share,
feel free to reach out to me on via <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>Also special thanks to <a href='https://www.reddit.com/user/ImSuperObjective2' target='_blank' rel='noreferrer noopener'>/u/ImSuperObjective2</a> on Reddit
and my colleague <a href='https://twitter.com/sebdedeyne' target='_blank' rel='noreferrer noopener'>Sebastian</a> for proof reading this post.</p> ]]></summary>

        <updated>2018-04-30T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ PHPStorm performance issues on OSX ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance-issues-on-osx"/>

        <id>https://www.stitcher.io/blog/phpstorm-performance-issues-on-osx</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Are you using a fancy Mac with the latest and greatest hardware,
yet still having performance issues with PHPStorm?
I've been struggling with this the past few months.</p>
<p>It turns out, the solution might be rather unexpected.
Instead of disabling plugins, inspections and what not;
it seems like there's an issue with font rendering in the JRE for Mac.</p>
<p>This means that on certain resolutions, for certain fonts and for certain kinds of antialiasing,
PHPStorm will need <em>a lot</em> of CPU power just to render fonts.
So how to fix it? There are a few options.</p>
<ul>
<li>Use another font. I was using Ubuntu Mono, and it turns out it requires quite a lot of CPU.
I've switched to Monaco instead.</li>
<li>Disabling <code>Subpixel</code> antialiasing. Go to <code>Preferences &gt; Appearance &amp; Behavior &gt; Appearance</code>
to configure antialiasing in your editor to <code>Greyscale</code> instead.
Your fonts won't look as good, but you'll notice a huge performance improvement.</li>
<li>Wait for JetBrains to find a fix. 2018.2 might fix some things,
but the real solution will take a while. There's an active discussion on the topic <a href='https://youtrack.jetbrains.com/issue/JRE-526#u=1466510431624' target='_blank' rel='noreferrer noopener'>here</a>.</li>
</ul>
<p>If you're looking for even more performance improvements that can be made in PHPStorm,
take a look over <a href="/blog/phpstorm-performance">here</a>.  </p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-04-25T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ What PHP can be ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/what-php-can-be"/>

        <id>https://www.stitcher.io/blog/what-php-can-be</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Have you ever wondered how your life as a PHP developer would be different
if that <em>one</em> feature you want was added?
I've made the thought experiment quite a few times already, and came to surprising conclusions.</p>
<p>Let's take, for example, the debate about strong types in PHP.
A lot of people, including myself, would like a better type system.
Strong types in PHP would definitely have an impact on my daily work.
Not just strong types, I also want generics, better variance and variable types.
Improvements to PHP's type system in general would have quite the impact on my programming life.</p>
<p>So what's stopping us from reaching a solution?</p>
<h2>Type theory</h2>
<p>Not everyone agrees on the vocabulary used when talking about type systems.
So let's clarify a few terms in the way that I will use them here.</p>
<p><strong>Strong or weak types</strong> define whether a variable can change its type after it's defined.
A simple example: say there's a variable <code>$a = 'test';</code>, which is a string;
you are able to re-assign that variable to another type, for example <code>$a = 1;</code>, an integer.</p>
<p>PHP is a weakly typed language, and I can illustrate this with a more real-life example:</p>
<pre class="language-php"><code class="language-php">$id = '1'; // An ID retrieved as a URL parameter.

function find(int $id): Model
{
    // ...
}

find($id);</code></pre>
<p>You might think that in modern PHP, you can avoid these problems with strict types, but that's not completely true.
Declaring strict types prevents other types being passed into a function,
but you can still change the value of the variable in the function itself.</p>
<pre class="language-php"><code class="language-php">declare(strict_types=1);

function find(int $id): Model
{
    $id = '' . $id;

    // This is perfectly allowed in PHP: `$id` is a string now.
}

find('1'); // This would trigger a TypeError.

find(1); // This would be fine.</code></pre>
<p>Like I said: PHP's type system is weak.
Type hints only ensure a variable's type at that point in time,
without a guarantee about any future value that variable might have.</p>
<p>Am I saying that strong types are better than weak ones? No.
But there's an interesting property to strong types, they come with a few guarantees.
If a variable has a type that's unchangeable, a whole range of unexpected behaviour simply cannot happen anymore.</p>
<p>You see, it's mathematically provable that if a strongly typed program compiles,
it's impossible for that program to have a range of bugs which can exist in weakly typed languages.
In other words, strong types give the programmer a stronger insurance that the code actually behaves how it's supposed to.</p>
<p>This doesn't mean that a strongly typed language cannot have bugs!
You're perfectly able to write a buggy implementation.
But when a strongly typed program compiles successfully,
you're sure a certain set of bugs and errors can't occur in that program.</p>
<p>If you want to further explore the topic on strong and weak types,
I'd recommend starting with <a href='https://www.destroyallsoftware.com/talks/ideology' target='_blank' rel='noreferrer noopener'>this video</a> by Gary Bernhardt.
Not only does it go further into detail on types,
Gary also discusses an important mindset in the whole types debate. </p>
<h3>When types are checked</h3>
<p>We talked about <strong>strong</strong> and <strong>weak</strong> types, what about <strong>static</strong> and <strong>dynamic</strong> types?
– This is where it starts to get truly interesting. </p>
<p>As you're probably aware, PHP is an interpreted language.
This means a PHP script is compiled at runtime.
When you send a request to a server running PHP,
it will take those plain <code>.php</code> files, and parse the text in it to something the processor can execute.</p>
<p>This is one of PHP's strong points by the way: the simplicity on how you can write a script,
refresh your webpage and everything is there.
That's a big difference compared to a language that has to be compiled before it can be run. </p>
<p>There is a downside though: performance.
And it's not hard to pinpoint this down: the more tasks there are to do at runtime,
the more impact there is on performance.
One of those many tasks the PHP engine has to take care of? Type checking.</p>
<p>Because PHP checks the type of variables at runtime,
it is often described as a <strong>dynamically typed</strong> language.
A <strong>statically typed</strong> language on the other hand,
will have all its type checks done before the code is executed.</p>
<blockquote>
<p>Hang on – I can hear you say – what does this have to do with what PHP can be?</p>
<p>—We'll get to that.</p>
</blockquote>
<h2>What this means for PHP</h2>
<p>Now we know what we're talking about, let's take a look at PHP's type system today.</p>
<p>I hope that after the theory, it's clear to you that PHP is a <strong>dynamic, weakly typed</strong> language.
And <strong>there's nothing wrong with that</strong>!</p>
<p>On the other hand, it's interesting to note that many people are asking for a better type system in PHP.
This doesn't mean we understand the implications of such a type system on PHP,
yet but many of us feel that <em>natural urge</em> for a better type system.
I'm sure that a lot of developers can point to real-life,
daily situations where a better type system would actually benefit them.</p>
<p>To give one obvious example: the question for generics.
Whether it is to ensure an array only contains one type of elements
or to improve ORM abstractions, lots of people are asking for generics in PHP.</p>
<p>The question than becomes: is creating a more complicated type system feasible with PHP's current type paradigm?
And the answer is, in part, yes—for sure.
There are parts that could be improved in the current, dynamic weak type system.</p>
<p>Type hints for one, added in PHP 7.0 and 7.1 are useful to many PHP developers;
Levi Morrison is working on <a href='https://github.com/morrisonlevi/php-src/tree/generic_traits' target='_blank' rel='noreferrer noopener'>generics in traits</a>;
also, there are very active discussions about the type system on the internals mailing list.</p>
<p><strong>However</strong>: we're missing a very important point.
As long as we're striving to improve PHP's runtime type system,
we'll always be dealing with the huge performance cost it will take.</p>
<h2>The benefits of a static type system</h2>
<p>This is what Rasmus Lerdorf has to say on the topic.</p>
<blockquote>
<p>Now if the RFC was a plan for baking a compile-time static analysis engine
into PHP itself, that would be interesting. But that is a massive project.</p>
<p>— <a href='https://externals.io/message/101477#101592' target='_blank' rel='noreferrer noopener'>Rasmus</a></p>
</blockquote>
<p>Imagine the possibilities when you can write PHP code that can be statically type checked
before running the code. Tools like PHPStan and Psalm already do a lot of static analysis,
but in my opinion it could go a step further. Say we could do this.</p>
<pre class="language-php"><code class="language-php">class List&lt;T&gt;
{
    private array $list;

    // ...
}</code></pre>
<p>What if this was valid PHP code?
And what if the runtime engine would just plain ignore it,
and a part of PHP engine could do all the type checks, before runtime?</p>
<p>That's –in my opinion– a better solution than standalone tools which rely on docblocks
and can't benefit from the core PHP engine, as they are written, in the case of Psalm and PHPStan, in PHP.</p>
<p>Don't get me wrong: tools like these are the first important step
towards a bigger goal. I just think we shouldn't stop here. </p>
<p>The need for a better type system is clear.
Lots of programmers experience a natural longing for something more than what's possible now.
This doesn't only happen in the PHP community, look at modern languages like Rust,
or supersets like TypeScript for JavaScript. </p>
<p>So maybe the answer for PHP lies into baked-in features in the core,
maybe it lies in a superset that compiles to PHP with extra type checking.
That last one by the way, has already been tried: Hack on HHVM. </p>
<p>There even is a third option, a question every programmer should ask themselves from time to time.
Should we want PHP to change dramatically to match our needs,
or should we change our frame of reference, and maybe look at other languages that might fit those needs better?</p>
<p>There's no shame in using another tool for the job, if that tools fit your needs better.
And after all, isn't a programming language just that? A tool.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-04-15T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ PHPStorm tips for power users ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/phpstorm-tips-for-power-users"/>

        <id>https://www.stitcher.io/blog/phpstorm-tips-for-power-users</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>A selection of less-known-yet-powerful features of PHPStorm.</p>
<h2>Pane modes</h2>
<p>Every pane in PHPStorm has several modes and can be configured either by hand or via key bindings.</p>
<ul>
<li><code>docked</code>: makes a pane not overlap with other panes or the code screen.</li>
<li><code>pinned</code>: automatically hides a pane when not pinned.</li>
<li><code>floating</code>: makes the pane float.</li>
<li><code>windowed</code>: makes the pane a full-blown window.</li>
<li><code>split</code>: to allow multiple panes in one area.</li>
</ul>
<p>Working with non-pinned panes will allow for a much cleaner editor view.
Binding certain panes to a key combination will show them at will.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/panes.gif"/>
</p>
<h2>Auto-imports</h2>
<p>By default, PHPStorm will only auto-import namespaces if you're already in a namespaced file.
Auto imports can be configured to also work in normal PHP files
in <code>Settings &gt; Editor &gt; General &gt; Auto Import</code>.</p>
<h2>Code templates</h2>
<p>You can change almost every template of auto-generated code in <code>Settings &gt; Editor &gt; File and Code Templates</code>
For example: generate getters and setters without docblocks, generate test functions in another format and others.</p>
<p><img src="/resources/img/blog/phpstorm-power-users/code-templates.png" srcset="/resources/img/blog/phpstorm-power-users/code-templates-2540x1674.png 2540w, /resources/img/blog/phpstorm-power-users/code-templates-1967x1296.png 1967w, /resources/img/blog/phpstorm-power-users/code-templates-1606x1058.png 1606w, /resources/img/blog/phpstorm-power-users/code-templates-1135x748.png 1135w, /resources/img/blog/phpstorm-power-users/code-templates-2271x1496.png 2271w" sizes="" alt="-" /></p>
<h2>String actions</h2>
<p>When pressing <code>alt + enter</code> (<code>Show Intention Actions</code>) on a string, you'll get multiple useful actions.
Things like <code>replace quotes</code> to toggle between single- and double quotes,
<code>split string</code> to.. split the string, and more.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/string-actions.gif"/>
</p>
<h2>Copy paths</h2>
<p>Two very useful commands:</p>
<ul>
<li><code>Copy Paths</code> to copy the full path to the current file.</li>
<li><code>Copy Reference</code> to copy the relative project path and line number to the current file.</li>
</ul>
<p>This &quot;current file&quot; can be the file you're editing,
but could also be the selected file in the tree view or navigation bar.</p>
<h2>Commands to toggle options</h2>
<p>Instead of opening the settings to toggle options,
there are a lot of toggles you can manage from the command palette.
For example: show or hide the tabs bar.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/tab-placement.gif"/>
</p>
<p>You can open the command palette with <code>⌘ ⇧ A</code> on the default Mac keymap.
If you want to lookup the keybinding on your system: the command is called <code>Find Action</code>.</p>
<h2>Custom JVM options</h2>
<p>PHPStorm runs on Java, and there's a file in which you can specify extra options for the JVM
to optimise performance. I've written about those options <a href="/blog/phpstorm-performance">here</a>.</p>
<h2>Distraction free mode</h2>
<p>Distraction free mode will hide all panes by default,
but you can easily bring them back via the command palette or key bindings.</p>
<p>Besides this &quot;no clutter by default&quot;, your code will also align more centered.
This can be a much more pleasant reading experience.
The width of this centered code view is configured in <code>Settings &gt; Editor &gt; Code Style &gt; Hard wrap at</code>.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/distraction-free.gif"/>
</p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>Color inspection</h2>
<p>Do you want to know why a word is highlighted or change it?
There's a command called <code>Jump to Colors and Fonts</code> which will allow you to edit
the color of your current scheme, for that entry.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/colors-and-fonts.gif"/>
</p>
<h2>Any more suggestions?</h2>
<p>I'd love to hear your own tips on how to use PHPStorm.
Feel free to let me know via <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p> ]]></summary>

        <updated>2018-03-15T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Responsive images done right ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/responsive-images-done-right"/>

        <id>https://www.stitcher.io/blog/responsive-images-done-right</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>I want to share some thoughts on responsive images.
I'll write about a certain mindset which many projects could benefit from:
small- and mid-sized web projects that don't need a full blown CDN setup,
but would enjoy the performance gain of responsive images.</p>
<p>The idea behind responsive images is simple:
try to serve an image with dimensions as close as possible to the image dimensions on screen.
This results in smaller bandwidth usage and faster load times!</p>
<p>For example: if you're displaying an image on a mobile device with a screen of 600px wide,
there's no need for downloading that image with a width of 1000px.</p>
<p>The responsive images spec handles not only media queries, but pixel density too.
The only thing the server has to do is generate multiple variations of the same image,
each with a different size.</p>
<p>If you'd like to know more about how things are done behind the scenes,
I'll share some links to interesting resources at the end of this post.</p>
<h2>How to render responsive images</h2>
<p>There are different ways to render variations of the same image.
The simplest approach could be this:
<strong>given an image, create 4 variations: 1920px, 1200px, 800px and 400px</strong>.</p>
<p>While this approach is easy to implement, it's not the most optimal.
The goal of responsive images is to serve faster loading images
while maintaining the highest possible quality for the user's screen.</p>
<p>There are two variables in this equation: the width of the user's screen
(and therefore the width of the image itself) and the file size of an image.</p>
<p>Say you have two images with the exact same dimensions.
Depending on the content in that image and the encoding used,
their file sizes could differ a lot.</p>
<p>Another approach could be to manually define the most optimal <code>srcset</code> for each image.
This is impossible to do for most websites.
A website could have lots of images,
and it's also difficult to manually calculate the dimensions for that optimal <code>srcset</code>. </p>
<p>Luckily, computers are very good at tedious calculations on a large scale.
This approach sounds like a good idea:
<strong>given an image, generate x-amount of variations of that image,
each variation being approximately 10% smaller in file size</strong>.</p>
<p>How does that sound? You now have a small margin of possible &quot;overhead&quot;
for variable screen sizes, but at least we're sure that margin won't be more than 10%.
Depending on the size of the image, for example: a thumbnail vs. a hero image;
we could even reduce the margin to 5% instead of 10%.</p>
<p>This will result in a different <code>srcset</code> for every image,
but that's not our concern: the responsive images spec can handle that for us.</p>
<p>This is how you would determine such variable dimensions in PHP:</p>
<pre class="language-php"><code class="language-php">// $fileSize = file size of the source image
// $width = width of the source image
// $height = height of the source image

$dimensions = [];

$ratio = $height / $width;
$area = $width * $width * $ratio;
$pixelPrice = $fileSize / $area;
$stepModifier = $fileSize * 0.1;

while ($fileSize &gt; 0) {
    $newWidth = floor(sqrt(($fileSize / $pixelPrice) / $ratio));

    $dimensions[] = new Dimension($newWidth, $newWidth * $ratio);

    $fileSize -= $stepModifier;
}</code></pre>
<p>I won't go into the details of this formula in this post.
I've <a href='https://www.stitcher.io/blog/tackling_responsive_images-part_2' target='_blank' rel='noreferrer noopener'>written about it</a> before,
but I do want to make clear that this approach will be able to calculate the dimensions for each variation
with a 10% reduction in file size, without having to scale that image beforehand.
That means there's no performance overhead or multiple guesses to know how an image should be scaled.</p>
<h2>In practice</h2>
<p>Let's take a look at a picture of a parrot.</p>
<p>This image has a fixed <code>srcset</code>:</p>
<p>
    <img src="/resources/img/static/responsive/parrot-fixed-800.jpg" srcset="/resources/img/static/responsive/parrot-fixed-1920.jpg 1920w, /resources/img/static/responsive/parrot-fixed-1200.jpg 1200w, /resources/img/static/responsive/parrot-fixed-800.jpg 800w, /resources/img/static/responsive/parrot-fixed-400.jpg 400w"/>
</p>
<p>This one has a dynamic <code>srcset</code>:</p>
<p><img src="/resources/img/blog/responsive/parrot.jpg" srcset="/resources/img/blog/responsive/parrot-1920x1280.jpg 1920w, /resources/img/blog/responsive/parrot-858x572.jpg 858w, /resources/img/blog/responsive/parrot-1214x809.jpg 1214w, /resources/img/blog/responsive/parrot-1487x991.jpg 1487w, /resources/img/blog/responsive/parrot-1717x1144.jpg 1717w" sizes="" alt="parrot" /></p>
<p>Feel free to open up your inspector and play around with it in responsive mode.
Be sure to disable browser cache and compare which image is loaded on different screen sizes.</p>
<p>For example, on an iPhone 7 screen, the fixed width image loads the 800px variant,
while the dynamic version loads the 678px image!</p>
<p>On smaller screens, a simple smartphone for example,
there are multiple variations available for the dynamic variant,
while the statically scaled image will always load the 400px image.</p>
<p>Can you imagine doing this by hand?
Neither can I! Of course I implemented this rendering method into Stitcher,
and we also implemented it at my job, Spatie, in the Laravel media library.</p>
<p>Usage is as simple as this:</p>
<pre class="language-php"><code class="language-php">$model
   -&gt;addMedia($yourImageFile)
   -&gt;withResponsiveImages()
   -&gt;toMediaCollection();</code></pre>
<pre class="language-html"><code class="language-html">&lt;img src="{{ $media-&gt;getFullUrl() }}" srcset="{{ $media-&gt;getSrcset() }}" sizes="[your own logic]"/&gt;</code></pre>
<p>You can read more about it <a href='https://docs.spatie.be/laravel-medialibrary/v7/responsive-images/getting-started-with-responsive-images' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<p>To finish off, here are the links which I mentioned at the start of this post.</p>
<ul>
<li>Responsive images explained in depth:
<a href='https://ericportis.com/posts/2014/srcset-sizes/' target='_blank' rel='noreferrer noopener'>https://ericportis.com/posts/2014/srcset-sizes/</a></li>
<li>The official specification website:
<a href='https://responsiveimages.org/' target='_blank' rel='noreferrer noopener'>https://responsiveimages.org/</a></li>
</ul>
<p>Special thanks to my colleague <a href='https://twitter.com/sebdedeyne' target='_blank' rel='noreferrer noopener'>Sebastian</a> for reviewing and editing this post.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-03-07T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Showing full MySQL foreign key errors ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/mysql-show-foreign-key-errors"/>

        <id>https://www.stitcher.io/blog/mysql-show-foreign-key-errors</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>In case of a foreign key error when creating or altering a table, MySQL doesn't show the full message.</p>
<p>You can read the full message by executing the following query and inspecting the <code>Status</code> column.</p>
<pre class="language-mysql"><code class="language-mysql">show engine innodb status;</code></pre>
<pre><code>------------------------
LATEST FOREIGN KEY ERROR
------------------------
2018-02-13 11:12:26 0x70000b776000 Error in foreign key constraint of table table/#sql-7fa_247a:
 foreign key (`my_foreing_key`) references `table` (`id`)
   on delete cascade:
Cannot resolve table name close to:
 (`id`)
   on delete cascade</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-02-13T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ MySQL query logging ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/mysql-query-logging"/>

        <id>https://www.stitcher.io/blog/mysql-query-logging</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <h2>Enable query logging</h2>
<pre><code>mysql -p -u root

&gt; SET GLOBAL general_log = 'ON';

# Turning it off again when finished

&gt; SET GLOBAL general_log = 'OFF';</code></pre>
<h2>Find the log file</h2>
<p>First, find the <code>mysqld</code> process ID.</p>
<pre><code>ps auxww | grep mysql

brent             2042   0.0  0.4  2849776  67772   ??  S    Fri11AM   0:16.80 /usr/local/opt/mysql/bin/mysqld</code></pre>
<p>Second, use <code>lsof</code> to find all files used by this process, and filter on <code>log</code>.</p>
<pre><code># sudo lsof -p &lt;PID&gt; | grep log

sudo lsof -p 2042 | grep log

mysqld  2042 brent    4u     REG                1,4  50331648  780601 /usr/local/var/mysql/ib_logfile0
mysqld  2042 brent    9u     REG                1,4  50331648  780602 /usr/local/var/mysql/ib_logfile1
mysqld  2042 brent   26u     REG                1,4        35  780672 /usr/local/var/mysql/mysql/general_log.CSM
mysqld  2042 brent   32r     REG                1,4         0  780673 /usr/local/var/mysql/mysql/general_log.CSV
mysqld  2042 brent   33w     REG                1,4     25504 9719379 /usr/local/var/mysql/HOST.log</code></pre>
<p><code>/usr/local/var/mysql/HOST.log</code> is the one you want, <code>HOST</code> will be the name of your host.</p>
<pre><code>tail -f /usr/local/var/mysql/HOST.log</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-01-20T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Where a curly bracket belongs ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/where-a-curly-bracket-belongs"/>

        <id>https://www.stitcher.io/blog/where-a-curly-bracket-belongs</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>This blogpost is based on <a href='https://www.youtube.com/watch?v=ZsHMHukIlJY' target='_blank' rel='noreferrer noopener'>this amazing talk by Kevlin Henney</a>.</p>
<p>Dedicating a whole blogpost to curly brackets might seem like overkill
but I believe it's worth thinking about them.
Not just because of one curly bracket, but because there's a bigger message in all this.
Thinking about how we read and write code not only improves the quality of that code,
it also increases our own and others ease of mind when working with it.
It can improve the fluency of your work and free your mind to think about real important stuff.
You know, things like &quot;application logic&quot; for example.</p>
<p>I wrote about visual code improvements a while back in a previous blogpost about <a href='/blog/a-programmers-cognitive-load' target='_blank' rel='noreferrer noopener'>cognitive load</a>.
Today I want to focus on that one little, yet very important character in our codebase: the curly bracket.
More specifically, we're only going to look at the opening curly bracket,
because there's little to no discussion about the closing one.</p>
<p>Let's take a look at a code sample.</p>
<pre class="language-php"><code class="language-php">public function __construct(string $publicDirectory, string $configurationFile, PageParser $pageParser, PageRenderer $pageRenderer) {
    // ...
}</code></pre>
<p>A constructor for a render task in Stitcher. It takes two config arguments and two objects.
Depending on the width of your screen, this piece of code might be fully visible in your IDE.
On this website it surely will not. </p>
<p>So what's wrong with this code?
Well first of all, you probably have to scroll to read it. That's a bad thing.
Scrolling requires an extra action for the developer to take.
You'll have to consciously search for information about the arguments of this method.
That time distracts you from focusing on the application code. </p>
<p>Second, if you're a web developer, you probably know people don't read, they rather scan.
This is especially true for websites, where the biggest area of attention leans towards the left.
And the same goes for reading code.
Putting important information to the right makes it more difficult to find,
and it also doesn't convey the same importance as things to the left.</p>
<p>In case of an argument list, all arguments are equally important;
yet in the above example a lot of useful information is pushed to that right, dark side.</p>
<p>So how do we pull the useful information more to the left?</p>
<pre class="language-php"><code class="language-php">public function __construct(string $publicDirectory, 
                            string $configurationFile, 
                            PageParser $pageParser, 
                            PageRenderer $pageRenderer) {
    // ...
}</code></pre>
<p>This could be the first thing you think about. But it doesn't really scale.
As soon as you're refactoring a method name, the alignment breaks.
Say we want to make this a static constructor instead of a normal one.</p>
<pre class="language-php"><code class="language-php">public static function create(string $publicDirectory, 
                            string $configurationFile, 
                            PageParser $pageParser, 
                            PageRenderer $pageRenderer) {</code></pre>
<p>See the alignment breaking?
Another issue with this approach is that things are still pushed rather far to the right;
let's take a look at another approach.</p>
<pre class="language-php"><code class="language-php">public function __construct(
    string $publicDirectory, string $configurationFile, 
    PageParser $pageParser, PageRenderer $pageRenderer) {
    // ...
}</code></pre>
<p>The advantage here is that the alignment issue on refactoring is solved.
However, how will you decide how many arguments should go on one line?
Will you make some styling guidelines about this?
How will you enforce them?
This example has four arguments, but what if it had three or five?  </p>
<p>Consistency is key. If there is a consistent rule about this, you won't have to think about it anymore.
And like we said before, if you don't have to think about this, there's room in your head for more important things.</p>
<p>So let's continue searching for that consistency.</p>
<pre class="language-php"><code class="language-php">public function __construct(
    string $publicDirectory, 
    string $configurationFile, 
    PageParser $pageParser, 
    PageRenderer $pageRenderer) {
    $this-&gt;publicDirectory = rtrim($publicDirectory, '/');
    $this-&gt;configurationFile = $configurationFile;
    $this-&gt;pageParser = $pageParser;
    $this-&gt;pageRenderer = $pageRenderer;
}</code></pre>
<p>By giving each argument its own line, we solve the above mentioned problems.
But there's still one issue with this example:
it's hard to distinguish between the argument list and the method body.</p>
<p>Kevlin Henney visualises this problem in a simple, yet clever way.
Let's replace all characters in this code with X's:</p>
<pre class="language-text"><code class="language-text">XXXXXX XXXXXXXX __XXXXXXXXX(
    XXXXXX XXXXXXXXXXXXXXXX, 
    XXXXXX XXXXXXXXXXXXXXXXXX, 
    XXXXXXXXXX XXXXXXXXXXX, 
    XXXXXXXXXXXX XXXXXXXXXXXXX) {
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXX = XXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXX;
}</code></pre>
<p>Can you see how difficult it has become to spot where the argument list ends
and the method body starts?</p>
<p>You might say &quot;there's still the curly bracket on the right indicating the end&quot;.
That's the thing we want to avoid! We want to keep the visual important information to the <strong>left</strong>.
How do we solve it? Kevlin Henney phrased it very well:</p>
<blockquote>
<p>Turns out, there is one true place where to put your curly brackets - Kevlin Henney</p>
</blockquote>
<pre class="language-text"><code class="language-text">XXXXXX XXXXXXXX __XXXXXXXXX(
    XXXXXX XXXXXXXXXXXXXXXX, 
    XXXXXX XXXXXXXXXXXXXXXXXX, 
    XXXXXXXXXX XXXXXXXXXXX, 
    XXXXXXXXXXXX XXXXXXXXXXXXX
) {
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXX = XXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXX;
}</code></pre>
<p>That is why it makes sense to put that curly bracket on a new line.
Here's the final result:</p>
<pre class="language-php"><code class="language-php">public function __construct(
    string $publicDirectory, 
    string $configurationFile, 
    PageParser $pageParser, 
    PageRenderer $pageRenderer
) {
    $this-&gt;publicDirectory = rtrim($publicDirectory, '/');
    $this-&gt;configurationFile = $configurationFile;
    $this-&gt;pageParser = $pageParser;
    $this-&gt;pageRenderer = $pageRenderer;
}</code></pre>
<p>Now, you might not like this way of structuring your code.
You might think it adds unnecessary length to a file.
But take a look at the facts:</p>
<ul>
<li>You're keeping the important information to the left of the screen, where most of your focus is.</li>
<li>This method is consistent, which allows us not having to think about it when reading it.
This frees up some of your human &quot;memory space&quot;: it reduces cognitive load;
it allows you to focus on the important stuff: the real application logic.</li>
<li>No one ever died because a file was &quot;longer than absolutely needed&quot;.
People do however get very frustrated working in legacy code bases,
having to read what other people wrote, especially when that code is difficult to read.</li>
<li>If the length of the file is really a bother for you, code folding can solve that issue.</li>
</ul>
<p>I like having this rule when coding.
There's never a discussion in my head about &quot;should I do it this way or that way&quot;?
This consistency helps me write and read my own code, and benefits other developers too, maybe even years later.</p>
<h2>What about small functions?</h2>
<p>Say your function only has one parameter, should it be split on multiple lines?
I personally don't think so. And if we're strictly applying the rules above,
the curly bracket may be put on the same line.</p>
<p>However, now that we're used to that one almost-empty line between the argument list and the method body,
it does seem like a nice idea to use this visual divider also for smaller functions.</p>
<pre class="language-php"><code class="language-php">XXXXXX XXXXXXXX __XXXXXXXXX(XXXXXX XXXXXXXXXXXXXXXX) 
{
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXX;
}</code></pre>
<p>Now we could start arguing about the placement of that closing bracket,
but that's a blogpost for another time. </p>
<h2>And control structures?</h2>
<p>The question about <code>if</code>, <code>for</code>, <code>while</code> and others should of course be addressed too.
In my opinion, the answer is simple, we can apply the same rules to them.</p>
<p>If the operands are pushed too far to the right, and we feel the need to split it, we do it like this:</p>
<pre class="language-php"><code class="language-php">if (
    $firstCondition === $secondCondition
    || $thirdOperand === 1
    || $fourthOperand
) {
    // ...
}</code></pre>
<p>Finally, here is a daring thought - and I don't do this myself by the way,
because following standards is also a good thing -
it might make sense to apply the same rule to short control structures.
After all: consistency, right?</p>
<pre class="language-php"><code class="language-php">foreach ($things as $thing)
{
    // ...
}</code></pre>
<hr />
<p>If you're not convinced by now, I'd love to hear why!
You can reach out to me on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.
I'm looking forward to discussing this further with you!</p>
<p>If you're looking for more to read on clean code.
Feel free to browse this blog a little further.
<a href='/blog/a-programmers-cognitive-load' target='_blank' rel='noreferrer noopener'>This is the best starting point</a>.   </p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-01-16T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ MySQL import: JSON with binary character set ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/mysql-import-json-binary-character-set"/>

        <id>https://www.stitcher.io/blog/mysql-import-json-binary-character-set</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>If you see this error when importing MySQL files:</p>
<pre><code>cannot create a JSON value from a string with CHARACTER SET 'binary'</code></pre>
<p>You should find and replace parts of the import file with the following regex:</p>
<p>Find: <code>(X'[^,\)]*')</code>, and replace by: <code>CONVERT($1 using utf8mb4)</code></p>
<p>Source: <a href='https://stackoverflow.com/questions/38078119/mysql-5-7-12-import-cannot-create-a-json-value-from-a-string-with-character-set' target='_blank' rel='noreferrer noopener'>StackOverflow</a>.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2018-01-09T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Asynchronous PHP ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/asynchronous-php"/>

        <id>https://www.stitcher.io/blog/asynchronous-php</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>We're working on a new package at Spatie.
It's called <a href='https://github.com/spatie/async' target='_blank' rel='noreferrer noopener'>spatie/async</a> and meant to do asynchronous parallel processing in PHP.</p>
<p>Parallel processing in PHP might seem like an edge case for many web developers,
but let's take a look at a few use-cases we see at Spatie:</p>
<ul>
<li><a href='https://github.com/spatie/laravel-medialibrary' target='_blank' rel='noreferrer noopener'>Image optimisation</a></li>
<li>PDF rendering</li>
<li><a href='https://github.com/spatie/crawler' target='_blank' rel='noreferrer noopener'>Concurrent site crawling</a></li>
<li><a href='https://github.com/spatie/schema-org' target='_blank' rel='noreferrer noopener'>Code generators</a></li>
<li>Static site generators - like Stitcher</li>
</ul>
<p>We wanted to create an easy-to-use package, yet one that could solve our use cases.
Some of the examples listed above will not use the new <code>spatie/async</code> package,
because there's also a queueing system provided with Laravel.</p>
<p>This is how asynchronous code with our package looks like.</p>
<pre class="language-php"><code class="language-php">use Spatie\Async\Process;

$pool = Pool::create();

foreach (range(1, 5) as $i) {
    $pool[] = async(function () use ($i) {
        // Something to execute in a child process.
    })-&gt;then(function (int $output) {
        // Handle output returned from the child process.
    })-&gt;catch(function (Exception $exception) {
        // Handle exceptions thrown in the child process.
    });
}

await($pool);</code></pre>
<h2>Outperforming Amp? Not quite yet.</h2>
<p>If you're into parallel PHP, you've probably heard of <a href='https://github.com/amphp' target='_blank' rel='noreferrer noopener'>Amp</a> and <a href='https://github.com/reactphp' target='_blank' rel='noreferrer noopener'>ReactPHP</a>.
Our package aims not to compete with those two, as it only solves one tiny aspect of parallelism in PHP;
and tries to solve it in a different way.</p>
<p>We did however run some benchmarks to compare our package performance against Amp.
Special thanks to <a href='https://github.com/kelunik' target='_blank' rel='noreferrer noopener'>Niklas Keller</a>, one of the developers of Amp.
He pointed out some mistakes in our previous benchmarks, and helped making them more fair.</p>
<p>The new benchmarks compare a few scenarios.
The first two groups plot the execution time of an empty process,
while the third and fourth groups show the execution time of processes with a different time to finish,
using several <code>sleep</code> intervals.
Between the two groups, we're also comparing a capped concurrency configuration and a non-capped configuration.
Capped means that there are more processes than the pool can execute at once.</p>
<p>The benchmark code can be found <a href='https://github.com/spatie/async-benchmark' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<p><img src="/resources/img/blog/async/benchmarks.png" srcset="/resources/img/blog/async/benchmarks-773x477.png 773w, /resources/img/blog/async/benchmarks-489x301.png 489w, /resources/img/blog/async/benchmarks-346x213.png 346w, /resources/img/blog/async/benchmarks-692x427.png 692w, /resources/img/blog/async/benchmarks-599x369.png 599w" sizes="" alt="Comparing Amp and spatie/async" /></p>
<p>I tried to draw a few conclusions from these test.</p>
<ul>
<li>Real life processes take time to run and finish.
For our use-cases, the &quot;with logic&quot; benchmarks are more relevant.</li>
<li>Regarding process execution time, it seems like our package has less overhead:
as long as the pool doesn't have to manage concurrency, we're finishing faster.</li>
<li>In real life applications though, the maximum concurrency setting will most likely be in effect,
so it's clear that we'll need to improve that part of our codebase if we want better performance compared to Amp.</li>
</ul>
<h2>What about ReactPHP?</h2>
<p>We've excluded ReactPHP from the benchmarks, because it's not a fair comparison.
ReactPHP doesn't allow to run closures or <code>Tasks</code> as sub-processes the way Amp and our package do.
With ReactPHP, you're working with plain processes, so there's no way to compare to it.</p>
<h2>About process signals</h2>
<p>The biggest difference between our package and Amp is the way of communicating between processes.
We're solely relying on process signals to determine when a process is finished.
It allows for less overhead, but also excludes Windows as a target platform. </p>
<p>Processes in UNIX systems can send signals to each other.
Depending on what kind of signal is received, a process will act different.
Signals are handled by the kernel, so they are pretty low level.
Before PHP 7.1 though, you had to <code>declare(ticks=1)</code> to use asynchronous signals in a reliable way.
This means that PHP will check for signals much more often, but it also introduces a lot of overhead:</p>
<blockquote>
<p>A tick is an event that occurs for every N low-level tickable statements executed by the parser within the declare block. The value for N is specified using ticks=N within the declare block's directive section.</p>
</blockquote>
<p>With PHP 7.1, there's a new way of handling interrupts sent by the kernel.</p>
<blockquote>
<p>Zend Engine in PHP 7.1 was extended with ability of safe time-out and interrupt handling. Actually, PHP VM checks for EG(vm_interrupt) flag on each loop iteration, user function entry or internal function exit, and call callback function if necessary.</p>
</blockquote>
<p>By using <code>pcntl_async_signals(true)</code>, PHP will now check for signals in a much more performant way.
A more in-depth explanation can be found in the <a href='https://wiki.php.net/rfc/async_signals' target='_blank' rel='noreferrer noopener'>rfc</a>,
submitted by Dmitry Stogov.</p>
<p>It's thanks to this mechanism that we're able to act on process status changes in a real asynchronous way,
without having to rely on sockets or process status polling.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-12-24T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Optimised UUIDs in mysql ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/optimised-uuids-in-mysql"/>

        <id>https://www.stitcher.io/blog/optimised-uuids-in-mysql</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>At <a href='https://www.spatie.be' target='_blank' rel='noreferrer noopener'>Spatie</a>, we're working on a large project which uses UUIDs in many database tables.
These tables vary in size from a few thousand records to half a million.</p>
<p>As you might know, normal UUIDs are stored as <code>CHAR(36)</code> fields in the database.
This has an enormous performance cost, because MySQL is unable to properly index these records.
Take a look at the following graph, plotting the execution time of hundred queries against two datasets: one with 50k rows, one with 500k rows.</p>
<p><img src="/resources/img/blog/binary-uuid/textual_uuid.png" srcset="/resources/img/blog/binary-uuid/textual_uuid-812x501.png 812w, /resources/img/blog/binary-uuid/textual_uuid-908x561.png 908w, /resources/img/blog/binary-uuid/textual_uuid-703x434.png 703w, /resources/img/blog/binary-uuid/textual_uuid-574x354.png 574w, /resources/img/blog/binary-uuid/textual_uuid-406x250.png 406w" sizes="" alt="Poor textual UUID performance" /></p>
<p><del>That's an average of more than 1.5 seconds when using textual UUIDs!</del> </p>
<p><em>There's an <strong>important edit</strong> here: the benchmark above was performed on un-indexed fields.
I've since changed the benchmark results to work with indexed textual fields for a more fair comparison.
There's still a performance gain to not using textual UUIDs, so keep reading!</em></p>
<p>Looking around for better alternatives, we found a two-part solution.</p>
<h2>Saving UUIDs as binary data</h2>
<p>Instead of saving UUIDs as <code>CHAR</code>, it's possible to store their actual binary data in a <code>BINARY</code> field.
Storing them in this format, MySQL has a lot less trouble indexing this table.
This is the graph plotting a much faster result.</p>
<p><img src="/resources/img/blog/binary-uuid/binary_uuid.png" srcset="/resources/img/blog/binary-uuid/binary_uuid-812x501.png 812w, /resources/img/blog/binary-uuid/binary_uuid-574x354.png 574w, /resources/img/blog/binary-uuid/binary_uuid-908x561.png 908w, /resources/img/blog/binary-uuid/binary_uuid-703x434.png 703w, /resources/img/blog/binary-uuid/binary_uuid-406x250.png 406w" sizes="" alt="Binary UUIDs have a huge performance improvement" /></p>
<p>That's an avarage of 0.00008832061291 seconds per query,
in comparison to <del>1.5</del> 0.0001493031979 seconds for the <strong>indexed</strong> textual UUID.</p>
<h2>It becomes even better!</h2>
<p>The binary encoding of UUIDs solved most of the issue.
There's one extra step to take though,
which allows MySQL to even better index this field for large datasets.</p>
<p>By switching some of the bits in the UUID, more specifically time related data,
we're able to save them in a more ordered way.
And it seems that MySQL is especially fond of ordered data when creating indices.
There's one important thing to note: this time related bits are only available in UUID version 1.</p>
<p>Using this approach, we can see following result.</p>
<p><img src="/resources/img/blog/binary-uuid/comparison.png" srcset="/resources/img/blog/binary-uuid/comparison-838x517.png 838w, /resources/img/blog/binary-uuid/comparison-419x258.png 419w, /resources/img/blog/binary-uuid/comparison-725x447.png 725w, /resources/img/blog/binary-uuid/comparison-937x579.png 937w, /resources/img/blog/binary-uuid/comparison-592x365.png 592w" sizes="" alt="Binary UUIDs have a huge performance improvement" /></p>
<p>The optimised approach is actually slower for lookups in a small table,
but it outperforms the normal binary approach on larger datasets.
It even performs better than an <code>AUTO_INCREMENT</code> integer ID!
But as you can see, we need very large tables before the optimised UUID has a benefit.</p>
<p>I would recommend only using UUIDs when there's a very good use case for them.
For example: when you want unique IDs over all tables, and not just one;
or if you want to hide exactly how many rows there are in the table.</p>
<p>The MySQL team wrote a <a href='http://mysqlserverteam.com/storing-uuid-values-in-mysql-tables/' target='_blank' rel='noreferrer noopener'>blogpost</a>
explaining this bit-shifting of UUIDs in further detail.
If you'd like to know how it works internally, over there is a good start. </p>
<p>If you're building a Laravel application and would like to use optimised UUIDs in your project,
we've made <a href='https://github.com/spatie/laravel-binary-uuid' target='_blank' rel='noreferrer noopener'>a package</a> especially for you.
You'll also find more benchmark details in the README over there.</p>
<p>Finally, if you're looking into implementing this behaviour in a non-Laravel project,
you should definitely take a look at <a href='https://github.com/ramsey/uuid' target='_blank' rel='noreferrer noopener'>Ramsey's UUID package</a>, we're using it too!</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-11-29T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Shorthand comparisons in PHP ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/shorthand-comparisons-in-php"/>

        <id>https://www.stitcher.io/blog/shorthand-comparisons-in-php</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>You probably already know some comparison operators in PHP.
Things like the ternary <code>?:</code>, the null coalescing <code>??</code> and the spaceship <code>&lt;=&gt;</code> operators.
But do you really know how they work?
Understanding these operators makes you use them more, resulting in a cleaner codebase.</p>
<h2>Ternary operator</h2>
<p>The ternary operator is a shorthand for the <code>if {} else {}</code> structure. Instead of writing this:</p>
<pre class="language-php"><code class="language-php">if ($condition) {
    $result = 'foo' 
} else {
    $result = 'bar'
}</code></pre>
<p>You can write this:</p>
<pre class="language-php"><code class="language-php">$result = $condition ? 'foo' : 'bar';</code></pre>
<p>If this <code>$condition</code> evaluates to <code>true</code>, the lefthand operand will be assigned to <code>$result</code>.
If the condition evaluates to <code>false</code>, the righand will be used.</p>
<p>Interesting fact: the name <strong>ternary operator</strong> actually means &quot;an operator which acts on three operands&quot;.
An <strong>operand</strong> is the term used to denote the parts needed by an expression.
The ternary operator is the only operator in PHP which requires three operands:
the condition, the <code>true</code> and the <code>false</code> result. Similarly, there are also <strong>binary</strong> and <strong>unary</strong> operators.
You can read more about it <a href='http://php.net/manual/en/language.operators.php' target='_blank' rel='noreferrer noopener'>here</a>.</p>
<p>Back to ternary operators: do you know which expressions evaluate to <code>true</code>, and which don't?
Take a look at the <code>boolean</code> column of <a href='http://php.net/manual/en/types.comparisons.php' target='_blank' rel='noreferrer noopener'>this table</a>.</p>
<p>The ternary operator will use its lefthand operand when the condition evaluates to <code>true</code>.
This could be a string, an integer, a boolean etc.
<strong>The righthand operand will be used for so called &quot;falsy values&quot;</strong>.
Examples would be <code>0</code> or <code>'0'</code>, an empty array or string, <code>null</code>, an undefined or unassigned variable, and of course <code>false</code> itself.
All these values will make the ternary operator use its righthand operand. </p>
<h3>Shorthand ternary operator</h3>
<p>Since PHP 5.3, it's possible to leave out the lefthand operand, allowing for even shorter expressions:</p>
<pre class="language-php"><code class="language-php">$result = $initial ?: 'default';</code></pre>
<p>In this case, the value of <code>$result</code> will be the value of <code>$initial</code>, unless <code>$initial</code> evaluates to <code>false</code>,
in which case the string <code>'default'</code> is used.</p>
<p>You could write this expression the same way using the normal ternary operator:</p>
<pre class="language-php"><code class="language-php">$result = $condition ? $condition : 'default';</code></pre>
<p>Ironically, by leaving out the second operand of the ternary operator, it actually becomes a <strong>binary operator</strong>.</p>
<h3>Chaining ternary operators</h3>
<p>As /u/prema_van_smuuf correctly pointed out on Reddit, the following, even though it seems logical; doesn't work in PHP:</p>
<pre class="language-php"><code class="language-php">$result = $firstCondition
    ? 'truth'
    : $elseCondition
        ? 'elseTrue'
        : 'elseFalse';</code></pre>
<p>The reason because is that the ternary operator in PHP is left-associative, and thus parsed in a very strange way.
The above example would always evaluate the <code>$elseCondition</code> part first, so even when <code>$firstCondition</code> would be <code>true</code>, you'd never see its output.</p>
<p>I believe the right thing to do is to avoid nested ternary operators alltogether.
You can read more about this strange behaviour
in this <a href='https://stackoverflow.com/questions/20559150/ternary-operator-left-associativity/38231137#38231137' target='_blank' rel='noreferrer noopener'>Stack Overflow answer</a>.</p>
<h2>Null coalescing operator</h2>
<p>Did you take a look at <a href='http://php.net/manual/en/types.comparisons.php' target='_blank' rel='noreferrer noopener'>the types comparison table</a> earlier?
The null coalescing operator is available since PHP 7.0.
It similar to the ternary operator, but will behave like <code>isset</code> <strong>on the lefthand operand</strong> instead of just using its boolean value.
This makes this operator especially useful for arrays and assigning defaults when a variable is not set. </p>
<pre class="language-php"><code class="language-php">$undefined ?? 'fallback'; // 'fallback'

$unassigned;
$unassigned ?? 'fallback'; // 'fallback'

$assigned = 'foo';
$assigned ?? 'fallback'; // 'foo'

'' ?? 'fallback'; // ''
'foo' ?? 'fallback'; // 'foo'
'0' ?? 'fallback'; // '0'
0 ?? 'fallback'; // 0
false ?? 'fallback'; // false</code></pre>
<p>The null coalescing operator takes two operands, making it a <strong>binary operator</strong>.
&quot;Coalescing&quot; by the way, means &quot;coming together to form one mass or whole&quot;.
It will take two operands, and decide which of those to use based on the value of the lefthand operand.</p>
<h3>Null coalescing on arrays</h3>
<p>This operator is especially useful in combination with arrays, because of its acts like <code>isset</code>.
This means you can quickly check for the existance of keys, even nested keys, without writing verbose expressions. </p>
<pre class="language-php"><code class="language-php">$input = [
    'key' =&gt; 'key',
    'nested' =&gt; [
        'key' =&gt; true
    ]
];

$input['key'] ?? 'fallback'; // 'key'
$input['nested']['key'] ?? 'fallback'; // true
$input['undefined'] ?? 'fallback'; // 'fallback'
$input['nested']['undefined'] ?? 'fallback'; // 'fallback'

null ?? 'fallback'; // 'fallback'</code></pre>
<p>The first example could also be written using a ternary operator:</p>
<pre class="language-php"><code class="language-php">$output = isset($input['key']) ? $input['key'] : 'fallback';</code></pre>
<p>Note that it's impossible to use the shorthand ternary operator when checking the existance of array keys.
It will either trigger an error or return a boolean, instead of the real lefthand operand's value.</p>
<pre class="language-php"><code class="language-php">// Returns `true` instead of the value of `$input['key']`
$output = isset($input['key']) ?: 'fallback' 

// The following will trigger an 'undefined index' notice 
// when $output is no array or has no 'key'.
//
// It will trigger an 'undefined variable' notice 
// when $output doesn't exist.
$output = $input['key'] ?: 'fallback';</code></pre>
<h3>Null coalesce chaining</h3>
<p>Like the ternary operator, the null coalescing operator can also be chained.
Its syntax is much more simple than the ternary's.</p>
<pre class="language-php"><code class="language-php">$input = [
    'key' =&gt; 'key',
];

$input['undefined'] ?? $input['key'] ?? 'fallback'; // 'key'</code></pre>
<h3>Null coalescing assignment operator</h3>
<p>In the future, we can expect an even shorter syntax called the <a href="https://wiki.php.net/rfc/null_coalesce_equal_operator">&quot;null coalescing assignment operator&quot;</a>.</p>
<pre class="language-php"><code class="language-php">// This operator is not in PHP yet!

function (array $parameters = []) {
    $parameters['property'] ??= 'default';
}</code></pre>
<p>In this example, <code>$parameters['property']</code> will be set to <code>'default'</code>, unless it is set in the array passed to the function.
This would be equivalent to the following, using the current null coalescing operator:</p>
<pre class="language-php"><code class="language-php">function (array $parameters = []) {
    $parameters['property'] = $parameters['property'] ?? 'default';
}</code></pre>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>Spaceship operator</h2>
<p>The spaceship operator, while having quite a peculiar name, can be very useful.
It's an operator used for comparison.
It will always return one of three values: <code>0</code>, <code>-1</code> or <code>1</code>.</p>
<p><code>0</code> will be returned when both operands are equals,
<code>1</code> when the left operand is larger, and <code>-1</code> when the right operand is larger.
Let's take a look at a simple example:</p>
<pre class="language-php"><code class="language-php">1 &lt;=&gt; 2; // Will return -1, as 2 is larger than 1.</code></pre>
<p>This simple example isn't all that exiting, right?
However, the spaceship operator can compare a lot more than simple values!</p>
<pre class="language-php"><code class="language-php">// It can compare strings,
'a' &lt;=&gt; 'z'; // -1

// and arrays,
[2, 1] &lt;=&gt; [2, 1]; // 0

// nested arrays,
[[1, 2], [2, 2]] &lt;=&gt; [[1, 2], [1, 2]]; // 1

// and even casing.
'Z' &lt;=&gt; 'z'; // -1</code></pre>
<p>Strangely enough, when comparing letter casing, the lowercase letter is considered the highest.
There's a simple explanation though.
String comparison is done by comparing character per character.
As soon as a character differs, their ASCII value is compared.
Because lowercase letters come after uppercase ones in the ASCII table, they have a higher value. </p>
<h3>Comparing objects</h3>
<p>The spaceship operator can almost compare anything, even objects.
The way objects are compared is based on the kind of object.
Built-in PHP classes can define their own comparison,
while userland objects are compared based on their attributes and values.</p>
<p>When would you want to compare objects you ask?
Well, there's actually a very obvious example: dates.</p>
<pre class="language-php"><code class="language-php">$dateA = DateTime::createFromFormat('Y-m-d', '2000-02-01');

$dateB = DateTime::createFromFormat('Y-m-d', '2000-01-01');

$dateA &lt;=&gt; $dateB; // Returns 1</code></pre>
<p>Of course, comparing dates is just one example, but a very useful one nevertheless.</p>
<h3>Sort functions</h3>
<p>One great use for this operator, is to sort arrays.
There are quite <a href='http://php.net/manual/en/array.sorting.php' target='_blank' rel='noreferrer noopener'>a few ways</a> to sort an array in PHP,
and some of these methods allow a user defined sort function.
This function has to compare two elements, and return <code>1</code>, <code>0</code>, or <code>-1</code> based on their position.</p>
<p>An excellent use case for the spaceship operator!</p>
<pre class="language-php"><code class="language-php">$array = [5, 1, 6, 3];

usort($array, function ($a, $b) {
    return $a &lt;=&gt; $b;
});

// $array = [1, 3, 5, 6];</code></pre>
<p>To sort descending, you can simply invert the comparison result:</p>
<pre class="language-php"><code class="language-php">usort($array, function ($a, $b) {
    return -($a &lt;=&gt; $b);
});

// $array = [6, 5, 3, 1];</code></pre>
<hr />
<p>Hi there, thanks for reading! I hope this blog post helped you!
If you'd like to contact me, you can do so on <a href='https://twitter.com/brendt_gd' target='_blank' rel='noreferrer noopener'>Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.
I always love to chat! </p>
<p>Also, maybe you're interested in reading some more?
I'd like to recommend another one of my blog posts, while you're here.
It's called <a href="/blog/phpstorm-tips-for-power-users">PHPStorm tips for power users</a>,
who knows, it might be interesting to you?</p> ]]></summary>

        <updated>2017-11-11T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Improving PHPStorm&#039;s performance ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance"/>

        <id>https://www.stitcher.io/blog/phpstorm-performance</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Let's just dive right in.</p>
<h2>Java VM options</h2>
<p>PHPStorm is made in Java. If you ever played Minecraft, you know you could allocate extra RAM by adding
flags to your startup command. You can also do this in PHPStorm, it's even built into the UI.</p>
<p>Go to <code>help &gt; Edit Custom VM Options</code>. You can play around with the settings here.
I for one changed the maximum amount of RAM allocated to PHPStorm, and added two graphics options
(at the end of the file).  </p>
<pre class="language-text"><code class="language-text">-Xms500m
-Xmx1500m

-Dawt.useSystemAAFontSettings=lcd
-Dawt.java2d.opengl=true

# Only for people on Mac, it makes Java use an optimised graphics engine.
-Dapple.awt.graphics.UseQuartz=true</code></pre>
<h2>Custom properties</h2>
<p>PHPStorm also has a file to set custom properties: <code>help &gt; Edit Custom Properties</code>.
Adding one option here changed the way PHPStorm renders text: it will show text immediately,
instead of analysing it first. The downside is that you can sometimes see a flash of unstyled text.
It feels much smoother though. </p>
<pre><code>editor.zero.latency.typing=true</code></pre>
<h2>Inspections and plugins</h2>
<p>PHPStorm is a powerful IDE, with lots of functionality built in by default. While I'd highly recommend using
these options to their full extent, there are some things that are never used. </p>
<p>Disabling unused plugins can be a start, but disabling inspections has a much bigger impact.
Take a look at the list and decide for yourself which onces you don't need: <code>Settings &gt; Editor &gt; Inspections</code>.</p>
<h2>Language injection</h2>
<p>One plugin in particular has a big performance impact: <code>IntelliLang</code>. This plugins allows for
languages to be recognised in different file formats. Eg. HTML autocompletion and highlighting in a PHP file.</p>
<p>I would not recommend completely disabling this plugin, but there might be some injections
which you don't need in your projects: <code>Settings &gt; Editor &gt; Language Injections</code>.</p>
<h2>Project setup</h2>
<p>Managing which files PHPStorm must index has to be done on a project level basis.
It is worth spending 5 minutes on initial project setup, for projects you'll work hours and days on.</p>
<h3>Excluding directories</h3>
<p>Go to <code>Settings &gt; Directories</code> to mark directories as excluded. PHPStorm won't index these files.
Directories to exclude would be eg. cache, public and storage directories;
directories which contain generated files from asset building, and last but not least: <code>vendor</code> and <code>node_modules</code>.</p>
<h3>The vendor problem</h3>
<p>Excluding directories from indexing means no auto-complete from those directories.
So excluding the vendor directory might not be the best idea.
There's a neat little trick though, which allows you to whitelist vendor directories you want to use,.</p>
<p>Go to <code>Settings &gt; Languages &amp; Frameworks &gt; PHP</code>. In here you can set include paths.
By manually specifying which vendor directories should be indexed, you can eliminate a lot of indexing time.
You might eg. always keep dependencies of vendors excluded, because chances are you won't be using those APIs.
If you come across a vendor you need auto-completion for, just add it to the list.</p>
<h3>Node modules</h3>
<p>Node modules are &quot;excluded&quot; by default, but they are added as include paths nevertheless.
Because of the size of the <code>node_modules</code> directory, it can take quite a while to index it.</p>
<p>JavaScript include paths are managed like PHP includes, but in <code>Settings &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Libraries</code>.
I personally don't write a lot of JavaScript, so I just remove the inclusion of <code>node_modules</code> completely. </p>
<p>Managing directories requires a bit of time for each project, but it's worth the performance gain in the long run.</p>
<h2>Font rendering on OSX</h2>
<p>There's a confirmed issue in the JRE with certain fonts.
While this might seem like a minor detail, certain fonts actually require a lot of processor power to render text,
slowing down PHPStorm in its whole. </p>
<p>I've written a separate blog post on this issue, and how you can fix it.
You can read it <a href="/blog/phpstorm-performance-issues-on-osx">here</a>.</p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h2>On a personal note</h2>
<p>I didn't start this post by writing my own thoughts, because I figured people were looking for some quick tips to speed of their IDE.
As a PHP developer, I think that PHPStorm is such a powerful tool, which helps me to write good and maintainable code.
I don't want it to stand in my way though, so good performance is an absolute requirement.</p>
<p>With the things listed above, I feel that PHPStorm offers the best balance between performance and intelligence.
I've written PHP in Sublime Text for ± 5 years. I did put some time into tweaking PHPStorm to my needs,
and now I'm 100% sure I'll never go back to Sublime Text.
My IDE is just way too smart and helpful to me. It allows me to focus on real application logic,
instead of writing the same boilerplate code over and over again.
I'll talk more about the benefits of an IDE over a text editor in another post.
For now, I hope that you found these tips helpful. </p>
<p>Happy coding!</p>
<hr />
<p>Ready for more? I've got a new blog post full of <a href="/blog/phpstorm-tips-for-power-users">tips for PHPStorm users</a>!</p> ]]></summary>

        <updated>2017-10-22T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Stitcher beta 2 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/stitcher-beta-2"/>

        <id>https://www.stitcher.io/blog/stitcher-beta-2</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>The second beta release of Stitcher ties a lot of loose ends together, getting ready for real production sites. </p>
<h3>Installation</h3>
<pre><code>composer require pageon/stitcher-core @beta</code></pre>
<h3>Changelog</h3>
<p>Note the a few config parameters are changed. These changes might fall under the category &quot;breaking&quot;,
but were really needed in order to get a more consistent API, before a real 1.0.0 release comes along.</p>
<ul>
<li>Add Parsedown extension to support classes on <code>&lt;pre&gt;</code> tags in fenced code blocks.</li>
<li>Disable directory listing via .htaccess.</li>
<li>Add <code>redirect.www</code> and <code>redirect.https</code> options. Allowing to automatically redirect non-www to www, and http to https.</li>
<li>Add <code>redirect</code> option in site config files to make a route redirect to another page.</li>
<li>Use <code>pageon/html-meta</code> ^2.0 from now on. Lots of tweaks to social meta tags were added.</li>
<li>Add <code>async</code> option which, when <code>ext-pcntl</code> is installed, will enable asynchronous page rendering.</li>
<li>Add Parsedown extension to support <code>target="_blank"</code> links by prefixing the URL with <code>*</code>.</li>
<li>Add <code>sitemap.xml</code> support. When setting the <code>sitemap.url</code> variable, a <code>sitemap.xml</code> will be generated.</li>
<li>Fix bug with Collection Adapters not copying meta tags from the base page for its sub-pages.</li>
<li>Add responsive images support to markdown parser.</li>
<li>The following config parameters are changed (#2):
<ul>
<li><code>caches.cdn</code> becomes <code>cache.cdn</code>.</li>
<li><code>caches.image</code> becomes <code>cache.images</code>.</li>
<li><code>directories.htaccess</code> is removed.</li>
<li><code>minify</code> becomes <code>engines.minifier</code></li>
</ul></li>
<li>Support multiple extensions per template engine (#7).</li>
<li>Support nested conditions in the filter adapter (#1).</li>
<li>Remove unused <code>eninges.async</code> option.</li>
</ul><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-08-27T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Mastering key bindings ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/mastering-key-bindings"/>

        <id>https://www.stitcher.io/blog/mastering-key-bindings</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>This blog post aims to make you think about the way you use key bindings whilst programming.
You'll read about some techniques I use to assign key bindings, how to memorise them, and use them efficiently.
But before we go on, I'll need to explain why spending time on key bindings is worth the effort.</p>
<h2>The need for keys</h2>
<p>I can't point to some psychological study to back this claim, just my own experience and common sense.
Using the mouse as less as possible when coding is a good thing.
You're not moving your hands around to grab the mouse, which saves time.
Also you don't have to make the mental switch between using a keyboard and a mouse as input device.</p>
<p>I believe these small things have to power to improve our skills as professional programmers significantly.
I've experienced a lot of gain by taking the time to learn to use the keyboard as often as I can.
While I'm still searching the optimal setup, I can already share some thoughts and techniques.
The most important thing to know is that key bindings are a matter of personal taste.
So don't take these next points as law, but rather apply them to your own situation. </p>
<blockquote>
<p>Key bindings are a personal preference. </p>
</blockquote>
<h2>The meaning of modifiers</h2>
<p>A keyboard has a few modifier keys, which allow you to modify the behaviour of other key presses.
A long time ago these keys were actually hard wired in the keyboard, to change the electronic bits sent to the computer.
In this modern time, it's still good to look at what their original meaning was.
It helped me define a formal definition for each modifier key, allowing me to remember what key combination belongs to which action.</p>
<blockquote>
<p>Define a personal meaning for each modifier key, and stick to it.</p>
</blockquote>
<h3>Meta/Command (⌘)</h3>
<p>I use this key when &quot;executing&quot; commands. Basically most of what's possible through the menu of an application. </p>
<h3>Option/Alt (⌥)</h3>
<p>Alt stands for &quot;alternate&quot;, changing the behaviour of another key combination. I use this key for a related action
of another key binding. </p>
<h3>Shift (⇧)</h3>
<p>Shift has a double meaning. First it's used for selections, because that's default OS behaviour.
Second, it's also often used to reverse the action.</p>
<p>I prefer a maximum of two modifier keys, and if complexer combinations are needed, opt for <strong>double key bindings</strong>.
One exception though: Shift (⇧) may be used in combination with other modifier keys to reverse the action.</p>
<blockquote>
<p>Prefer at most two modifier keys, or use double key bindings.</p>
</blockquote>
<h3>Control/Ctrl (^)</h3>
<p>I use the control key for text- and code related manipulations.
Actions like moving the cursor, working with selections, working with lines, etc.
I find it hard to give a formal definition for the Control key, but its use is clear in most cases. </p>
<p>A note for Windows users: the Control key is used much more in comparison to the Meta (Windows) key.
Meaning you probably want to switch the definition of the two, or even ditch the Meta key.
Even though this might seem like a good idea, adding the meta key in your workflow can be a good thing,
as it adds another modifier key to your availability.</p>
<h3>Function (fn)</h3>
<p>Because the function key is often not accessible on desktop keyboards, I choose not to depend on this key.
I only make an exception for some edge cases like page-up or page-down. </p>
<h2>Learning</h2>
<p>Keeping my own definitions in mind, it's easy to start defining key bindings. Though to remember them requires practice.
I'd recommend not assigning all key bindings at once, but rather slowly add them when you need them.</p>
<blockquote>
<p>Assign new key bindings when you need them.</p>
</blockquote>
<p>I choose not to override operating system (OS) key bindings. Things like <code>copy</code>, <code>paste</code>, <code>select all</code> or <code>quit</code> are
never overridden.
Key binding defaults provided by your IDE or editor, however, may be changed.
If you come from Sublime Text like me, you've probably learned some defaults which you are accustomed with.
When switching to PHPStorm a few years ago, I decided to keep some of those key bindings I knew from Sublime.</p>
<blockquote>
<p>There's no need to change OS-level key bindings like <code>copy</code> or <code>select all</code>.</p>
</blockquote>
<p>Even now, I'm still changing key bindings from time to time. Especially when I came up with my definition list.
One thing I find useful when learning new key bindings, is to disable the old ones. IDEs like PHPStorm allow you to add
multiple combinations for the same action. I prefer to immediately notice when I'm using an old combination.
This makes me learn faster.</p>
<blockquote>
<p>Remove key bindings you wish to unlearn.</p>
</blockquote>
<p>Furthermore, when stuck in a situation, I try not to immediately grab the mouse.
I try to think the problem and define what I want to do.
Most of the time, I can remember which combination of keys should be pressed, because of the definition list above.
When my memory fails me, I'm lucky to be working in an IDE with awesome key binding management,
so it's easy to find the correct combination back.</p>
<blockquote>
<p>Don't grab the mouse when panicking.</p>
</blockquote>
<p>You keymap is a very personal file, which slowly grows to match your workflow the best. I recommend you storing a backup
of your keymap somewhere else, GitHub would be a good place.
<a href='https://github.com/brendt/settings-repository/blob/master/keymaps/Brendt.xml' target='_blank' rel='noreferrer noopener'>Here's mine</a>.</p>
<blockquote>
<p>Check your keymap into version control.</p>
</blockquote>
<h3>A few of my own examples</h3>
<ul>
<li><code>⌘ p</code> Search file</li>
<li><code>⌘ ⇧ p</code> Search recent files</li>
<li><code>⌘ ⌥ p</code> Search symbols in file</li>
<li><code>⌘ ⌥ space</code> Show suggestions</li>
<li><code>⌘ ⌥ enter</code> Go to declaration</li>
<li><code>^ ⌥ →</code> Move right with camelHops</li>
<li><code>^ ⌥ ←</code> Move left with camelHops</li>
<li><code>⌥ ↑</code>  Move cursor paragraph up</li>
<li><code>⌥ ↓</code>  Move cursor paragraph down</li>
<li><code>⇧ ⌥ ↑</code> Extend selection</li>
<li><code>⇧ ⌥ ↓</code> Shrink selection</li>
</ul>
<h2>Closing thoughts</h2>
<p>I grew in love with key bindings over the years. I still use the mouse for basic navigation,
but once I start coding, I try to use it as little as possible. I find that it's easier to work this way.
Not only do I gain time by not switching as often to the mouse; I also find it puts less cognitive load on my brain,
meaning I'm able to concentrate more on coding.</p>
<p>This might seem like a small thing to do, but as a professional programmer, you're doing those small things many,
many times a day. It's worth taking the time to optimise these areas and skills, I find they make me a better programmer.</p>
<p>Do you want to read more about cognitive load? I've written about <a href='https://www.stitcher.io/blog/a-programmers-cognitive-load' target='_blank' rel='noreferrer noopener'>fonts and visuals</a>
in a previous blog post. Do you still have a question or something on your mind? <a href="mailto:brendt@stitcher.io">Send me an email</a>!</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-08-25T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ A programmer&#039;s cognitive load ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/a-programmers-cognitive-load"/>

        <id>https://www.stitcher.io/blog/a-programmers-cognitive-load</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>As a professional programmer, I'm reading and writing code on a daily basis. I'm working on new projects, doing code reviews, working with legacy code, learning documentation etc. Based on my own experience and that of colleagues, being a programmer often involves a lot more reading than actually writing code. Whether it's your own code or that of others, when you open a file, you have to take it all in. You need to wrap your head around what's going on, before you're able to write your code. Doing this day by day, it's important to find ways to make this process easy. To try and reduce this cognitive load as much as possible. Streamlining the way you take in code, will allow you to not only work faster and better; but also improve your mental state and mood.</p>
<blockquote>
<p>In cognitive psychology, cognitive load refers to the total amount of mental effort being used in the working memory - <a href='https://en.wikipedia.org/wiki/Cognitive_load' target='_blank' rel='noreferrer noopener'>wikipedia</a></p>
</blockquote>
<p>Today I want to share some techniques that can help you reduce this cognitive load while coding. In contrast to some recent advocates of &quot;visual debt&quot;, I won't talk about stripping away pieces of your codebase. We'll look purely into the visual aspect: what makes code hard to read and reason about, and how to make it easier.</p>
<h2>Fonts and spacing</h2>
<p>Fonts have an influence on our mood. The <a href='https://crew.co/blog/the-psychology-of-fonts/' target='_blank' rel='noreferrer noopener'>people at Crew</a> wrote an interesting piece about how fonts make us feel. Your font choice has a big impact on how much load is put on your brain to process the text on your screen. Not only the font, but also the font size, line height and letter spacing has a role. Typography itself is a topic books are written about. I encourage you to think about your current font choice, and how it influences the way you read code.</p>
<p>A comparison between a not-so-good and better font configuration, in my experience.</p>
<p><img src="/resources/img/blog/fonts/font-size_bad.png" srcset="/resources/img/blog/fonts/font-size_bad-796x238.png 796w, /resources/img/blog/fonts/font-size_bad-689x206.png 689w, /resources/img/blog/fonts/font-size_bad-890x267.png 890w, /resources/img/blog/fonts/font-size_bad-562x168.png 562w, /resources/img/blog/fonts/font-size_bad-398x119.png 398w" sizes="" alt="A not-so-good font choice" /></p>
<p><img src="/resources/img/blog/fonts/font-size_good.png" srcset="/resources/img/blog/fonts/font-size_good-890x472.png 890w, /resources/img/blog/fonts/font-size_good-796x422.png 796w, /resources/img/blog/fonts/font-size_good-562x298.png 562w, /resources/img/blog/fonts/font-size_good-398x211.png 398w, /resources/img/blog/fonts/font-size_good-689x365.png 689w" sizes="" alt="A better font configuration" /></p>
<h2>Folding</h2>
<p>Ever worked with a controller providing some CRUD actions? A class with a few methods? Folding your method bodies by default gives you a much clearer overview of the class when opening a file. It makes it easier to decide where you want to go to, instead of scrolling and searching. Take a look at the following example.</p>
<p><img src="/resources/img/blog/fonts/folding.png" srcset="/resources/img/blog/fonts/folding-1783x1069.png 1783w, /resources/img/blog/fonts/folding-1261x756.png 1261w, /resources/img/blog/fonts/folding-891x534.png 891w, /resources/img/blog/fonts/folding-1544x926.png 1544w, /resources/img/blog/fonts/folding-1994x1196.png 1994w" sizes="" alt="Folded code by default" /></p>
<p>PHPStorm can fold code by default (Settings &gt; Editor &gt; General &gt; Code Folding). I was a bit hesitant to enable it by default, but I can assure you this is an amazing feature once you're used to it. It's also more convenient than the file structure navigator many IDEs and editors provide. This approach allows you to see the visual structure, color and indentation of the class. </p>
<p>You'll probably want to learn the keybinds associated with folding too. On Mac with PHPStorm, these are the defaults: <code>⌘⇧+</code>, <code>⌘⇧-</code>, <code>⌘+</code> and <code>⌘-</code>. </p>
<h2>DocBlocks</h2>
<p>DocBlocks is a good tool to clarify what code actually does. Furthermore, IDEs like PHPStorm rely on certain DocBlocks. They are needed to provide correct autocomplete functionality in some cases. A frequent example is &quot;array of objects&quot;. Yet modern PHP offers a lot of possibilities to write self-documenting code. DocBlocks often state the obvious things, which are already known by reading the code. </p>
<p>Take a look again at the example above. There are no DocBlocks there. I've actually removed all redundant DocBlocks from the Stitcher core. I only kept DocBlocks which provide IDE autocomplete functionality and real documentation. I also disabled the automatic DocBlock generation in PHPStorm. </p>
<p>There are two requirements for this method to work though.</p>
<ul>
<li>Clear naming of methods, variables, constants, etc.</li>
<li>Using type hints.</li>
</ul>
<p>It would be nice if PHP also had class variable type hints, and if we could type hint arrays. Fortunately, chances are these features will be implemented in PHP in the future.</p>
<p>Self documented code is better than DocBlocks. Modern PHP provides the right building blocks to write such code. My rule of thumb when adding DocBlocks is asking the following question: &quot;Does this DocBlock actually add more information than already available through the code?&quot;. If the answer is no, the DocBlock shouldn't be there. Removing the DocBlocks frees up your code, giving you visual &quot;space to breath&quot;.</p>
<h2>Naming things</h2>
<p>The last point to keep in mind: how do you name things? It's better to give a variable a longer, descriptive name, rather than make them as short as possible. Short, cryptic names make sense at the moment of writing the code. But even a few days after you've written them, they already become vague and meaningless. Better to write a little more, than to read ten times as much to understand what you've written in the past. </p>
<p>A few examples from the Stitcher core.</p>
<ul>
<li><code>createPage()</code> was renamed to <code>createPaginatedPage()</code>.</li>
<li><code>$process</code> became <code>$pageRenderProcess</code>.</li>
<li><code>testStitcher()</code> changed to multiple methods, one of which called <code>test_stitch_multiple_routes()</code>.</li>
</ul>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<p>The four points I listed today have almost nothing to do with how you write real code (programming logic, which patterns used, etc.). But they have an impact on the cognitive load put on your brain day by day. They take away some of the pain points when writing code. They allow you to enjoy programming more. </p> ]]></summary>

        <updated>2017-06-25T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Responsive images as CSS background ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/responsive-images-as-css-background"/>

        <id>https://www.stitcher.io/blog/responsive-images-as-css-background</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Integrating the <a href='https://responsiveimages.org/' target='_blank' rel='noreferrer noopener'>Responsive Images spec</a> together with CSS backgrounds, allowing for more flexibility for eg. hero images because you can use <code>background-size: cover;</code> etc., and still have the full benefits of responsive image loading.</p>
<pre class="language-html"><code class="language-html">&lt;html&gt;
&lt;head&gt;
    &lt;style&gt;
        img {
            width:100%;
        }
        img.loaded {
            display: none;
        }
        .responsive-image {
            width:100%;
            height:500px;
            background-size: cover;
            background-position: center;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="responsive-image"&gt;
        &lt;img src="./small.jpg" srcset="./large.png 3000w, ./medium.jpg 1920w, ./small.jpg 425w" &gt;
    &lt;/div&gt;

    &lt;script&gt;
        document.addEventListener('DOMContentLoaded', function() {
            const images = document.querySelectorAll('.responsive-image');

            [].forEach.call(images, function (imageContainer) {
                const image = imageContainer.querySelector('img');

                image.addEventListener('load', function () {
                    if (!image.currentSrc) {
                        return;
                    }

                    imageContainer.style['background-image'] = "url('" + image.currentSrc + "')";
                    image.classList.add('loaded');
                });
            })
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-06-24T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Object oriented generators ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/object-oriented-generators"/>

        <id>https://www.stitcher.io/blog/object-oriented-generators</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>The following code shows an object oriented way of implementing a well known generator function: to read lines from a large file. </p>
<pre class="language-php"><code class="language-php">class FileReader implements \Iterator 
{
    private $handle;
    private $current;

    public static function read(string $fileName) : FileReader {
        return new self($fileName);
    }

    public function __construct(string $fileName) {
        $this-&gt;handle = fopen($fileName, 'r');
        $this-&gt;next();
    }

    public function __destruct() {
        fclose($this-&gt;handle);
    }

    public function current() {
        return $this-&gt;current;
    }

    public function next() {
        $this-&gt;current = fgets($this-&gt;handle);
    }

    public function key() {
        return ftell($this-&gt;handle);
    }

    public function valid() {
        return !feof($this-&gt;handle);
    }

    public function rewind() {
        rewind($this-&gt;handle);
    }
}</code></pre>
<p>Using the file reader.</p>
<pre class="language-php"><code class="language-php">$lines = FileReader::read('path_to_large_file.txt');

foreach ($lines as $line) {
    echo $line;
}</code></pre>
<p>A comparison to using generators and the <code>yield</code> keyword, based on the tests I ran:</p>
<ul>
<li>This approach takes the same amount of time to execute.</li>
<li>It has the same memory footprint as a generator function.</li>
<li>It has the benefit of easier re-usability (in my opinion).</li>
</ul>
<p>In comparison to <code>file_get_contents</code>: reading the same file required of 15MB of memory, whilst
this solution required only 2MB, because it only reads one line in memory at a time.</p>
<p>To round up, this is the generator solution using <code>yield</code>.</p>
<pre class="language-php"><code class="language-php">function read($fileName) {
    $handle = fopen($fileName, 'r');

    while (!feof($handle)) {
        yield fgets($handle);
    }

    fclose($handle);
}

$lines = read('path_to_large_file');

foreach ($lines as $line) {
    echo $line;
}</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-06-17T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Process forks ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/process-forks"/>

        <id>https://www.stitcher.io/blog/process-forks</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <pre class="language-php"><code class="language-php">function async(Process $process) : Process {
    socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets);
    [$parentSocket, $childSocket] = $sockets;

    if (($pid = pcntl_fork()) == 0) {
        socket_close($childSocket);
        socket_write($parentSocket, serialize($process-&gt;execute()));
        socket_close($parentSocket);
        exit;
    }

    socket_close($parentSocket);

    return $process
        -&gt;setStartTime(time())
        -&gt;setPid($pid)
        -&gt;setSocket($childSocket);
}

function wait(array $processes) : array {
    $output = [];

    while (count($processes)) {
        foreach ($processes as $key =&gt; $process) {
            $processStatus = pcntl_waitpid($process-&gt;getPid(), $status, WNOHANG | WUNTRACED);

            if ($processStatus == $process-&gt;getPid()) {
                $output[] = unserialize(socket_read($process-&gt;getSocket(), 4096));
                socket_close($process-&gt;getSocket());
                $process-&gt;triggerSuccess();

                unset($processes[$key]);
            } else if ($processStatus == 0) {
                if ($process-&gt;getStartTime() + $process-&gt;getMaxRunTime() &lt; time() || pcntl_wifstopped($status)) {
                    if (!posix_kill($process-&gt;getPid(), SIGKILL)) {
                        throw new \Exception("Failed to kill {$process-&gt;getPid()}: " . posix_strerror(posix_get_last_error()));
                    }

                    unset($processes[$key]);
                }
            } else {
                throw new \Exception("Could not reliably manage process {$process-&gt;getPid()}");
            }
        }

        if (!count($processes)) {
            break;
        }

        usleep(100000);
    }

    return $output;
}</code></pre>
<p>The <code>Process</code> class, used to pass data in a defined way.</p>
<pre class="language-php"><code class="language-php">abstract class Process
{
    protected $pid;
    protected $name;
    protected $socket;
    protected $successCallback;
    protected $startTime;
    protected $maxRunTime = 300;

    public abstract function execute();

    public function onSuccess(callable $callback) : Process {
        $this-&gt;successCallback = $callback;

        return $this;
    }

    public function triggerSuccess() {
        if (!$this-&gt;successCallback) {
            return null;
        }

        return call_user_func_array($this-&gt;successCallback, [$this]);
    }

    public function setPid($pid) : Process {
        $this-&gt;pid = $pid;

        return $this;
    }

    public function getPid() {
        return $this-&gt;pid;
    }

    public function setSocket($socket) : Process {
        $this-&gt;socket = $socket;

        return $this;
    }

    public function getSocket() {
        return $this-&gt;socket;
    }

    public function setName(string $name) : Process {
        $this-&gt;name = $name;

        return $this;
    }

    public function getName() : string {
        return $this-&gt;name;
    }

    public function setStartTime($startTime) {
        $this-&gt;startTime = $startTime;

        return $this;
    }

    public function getStartTime() {
        return $this-&gt;startTime;
    }

    public function setMaxRunTime(int $maxRunTime) : Process {
        $this-&gt;maxRunTime = $maxRunTime;

        return $this;
    }

    public function getMaxRunTime() : int {
        return $this-&gt;maxRunTime;
    }
}</code></pre>
<p>A concrete Process implementation.</p>
<pre class="language-php"><code class="language-php">class MyProcess extends Process
{
    public function execute() {
        sleep(1);

        return true;
    }
}</code></pre>
<p>And bringing it all together.</p>
<pre class="language-php"><code class="language-php">$processA = async(new MyProcess());
$processB = async(new MyProcess());

$output = wait([$processA, $processB]);

print_r($output);
die('Done!');</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-06-09T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Performance 101: building the better web ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/performance-101-building-the-better-web"/>

        <id>https://www.stitcher.io/blog/performance-101-building-the-better-web</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>Today we're looking into web performance. I'll share some useful links to articles and tutorials written by people with a lot of professional experience on the topic. I am writing from the perspective of a developer who brought pieces of this knowledge into practice. I've learned some lessons along the way, which you can learn from too.</p>
<p>If you want to reach out, to talk about performance, or with additions to this post, you can always reach me <a href="mailto:brendt@stitcher.io">via email</a>.</p>
<p>Without further ado, let's dive into the mystical subject of web performance. We'll start discussing the mindset you should have when building performant websites. Then we'll move on to a lot of practical examples, and links to other learning resources.</p>
<h3>Performance mindset</h3>
<p>If there's one thing you should take away from this post, it's the mindset every web developer should have. The industry builds tools, frameworks and systems to make the life of developers easier. All the while forgetting what web development actually is about. We're not making artisanal pieces of art anymore. (Maybe we never did?) We're generally aiming for fast development and quick results. We're forgetting about what matters in the end: the website and its visitors.</p>
<p>This post is meant for people with that mindset; people who want to become the best developer they can be. Always pushing yourself to the next level for a better end result. If you're a web developer who relates to this, understanding performance is one of the most important pillars to build upon.</p>
<p>That's it for the philosophical part of this post. Of course I'm completely ignoring the business side of the IT world. I'm not talking about money, time or scope here. I'm talking about improving your own development skills. So that you could use that knowledge and experience in spare time projects or for real clients and work. </p>
<h3>Web basics: HTML</h3>
<p>One of the key components to understand and improve web performance, is to know how the browser renders HTML. There's a lot more to it than you might think, and understanding these steps makes you reason completely different about your own code. Google has the best crash course on the topic: <a href='https://developers.google.com/web/fundamentals/performance/' target='_blank' rel='noreferrer noopener'>https://developers.google.com/web/fundamentals/performance/</a>, especially the &quot;critical rendering path&quot; opened my eyes.</p>
<p>Another important concept to understand is static HTML pages. In the end, they are what's served to the user. There's no need to generate pages on the fly, while the user is waiting to see the result. Dynamic websites abuse the user's time for the sake of easy development. Now I'm not saying dynamic websites are bad. What I do say is that every dynamic system should have the technology in place to exclude the dynamic phase from the request/response cycle. More on that topic later. If you're into real static websites, <a href='https://www.staticgen.com/' target='_blank' rel='noreferrer noopener'>https://staticgen.com</a> is a good place to find the right tool for your needs.</p>
<p>Moving on to responsive images. Possibly the number one optimisation when it comes to bandwidth usage. The responsive images spec is designed to address the issue of large images, or render blocking JavaScript workarounds. It's completely backwards compatible (I'm talking to you Edge), and has a good chance of improving your website's loading time: <a href='https://responsiveimages.org/' target='_blank' rel='noreferrer noopener'>https://responsiveimages.org</a>.</p>
<h3>Backend development</h3>
<p>I've already mentioned dynamic websites in the previous section. They are of course a must in the modern web; but you should think about which pages need to render things on the fly, and which could be cacheable. There are many layers of caching possible on the server side. We'll discuss eg. Varnish cache later in this post. Caching your backend code will highly depend on the kind of language and framework you're using. The most important thing to mention about caching is that you shouldn't view your cache as a layer &quot;on top&quot; of your application. It should be an integral part of all the code you write.</p>
<p>As a PHP developer, I'm used to the strict request/response lifecycle every PHP web application goes through. There are also a lot of other languages which provide the same logic for web applications. This approach is very easy to reason about, but it means the application has to be bootstrapped from scratch for every single request. Libraries like <a href='http://reactphp.org/' target='_blank' rel='noreferrer noopener'>ReactPHP</a> or <a href='https://github.com/amphp/amp' target='_blank' rel='noreferrer noopener'>AMP</a> address this issue by enabling the developer to handle multiple requests from a single bootstrapped application. Asynchronous and parallel applications add a lot of complexity at first, and might be very difficult to wrap your head around. But it might very well mean a huge decrease in response time.</p>
<h3>Server side</h3>
<p>Returning to the topic of caching, there's a lot that can be done server side. First of all there are caching headers which you should definitely implement: <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control' target='_blank' rel='noreferrer noopener'>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</a>.</p>
<p>Second, you should serve content that's ready to be served. Use a CDN and Varnish in front of your real server. This way you're able to serve images, content pages, etc. immediately, while they were generated before. One of the dangers of using a so called &quot;proxy&quot; like Varnish is that many developers might see it as that &quot;layer on top of your own application&quot;. In reality, you'll need to communicate a lot with Varnish from within your own application. You can read more about Varnish here: <a href='https://varnish-cache.org/' target='_blank' rel='noreferrer noopener'>https://varnish-cache.org</a>.</p>
<p>The benefit of your own server? It's <strong>your server</strong>. You have control over the resources used and available. Don't put extra load on the client, when you could let your server take care of it. This is of course a very simplified way of thinking about resources. But it's always possible to upgrade your server's hardware, when you have no control over the hardware clients are using.</p>
<p>And lastely, if you haven't implemented HTTP/2 yet: implement HTTP/2! Not sure why? This might give you an idea: <a href='https://www.sitepoint.com/what-is-http2/' target='_blank' rel='noreferrer noopener'>https://sitepoint.com/what-is-http2</a>.</p>
<h3>Frontend development</h3>
<p><strong>Disclaimer:</strong> I'm a backend web developer. I have written, and still write lots of CSS and JavaScript code, but I'm not in any way a professional when it comes to frontend web development. So I'll only use common sense and reasoning to share a few concepts of performance improvement.</p>
<p>You should think what resources a page really needs. If that particular page only needs 5 kilobytes out of 100 kilobytes of CSS, then don't load the other 95 kilobytes! The same goes for JavaScript. </p>
<p>Also think about inlining the important resources in your HTML pages, at least while HTTP/2 server push hasn't gone mainstream yet.</p>
<p>A good place to go from here would be Tim Kadlec's blog: <a href='https://timkadlec.com/' target='_blank' rel='noreferrer noopener'>https://timkadlec.com</a>.</p>
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<h3>In summary</h3>
<ul>
<li>Think performance-first.</li>
<li>Understand how HTML is loaded and rendered.</li>
<li>Serve content that's ready to be served.</li>
<li>Don't abuse the user's time by dynamically rendering on the fly when it's not needed.</li>
<li>Improve the request/response cycle server-side.</li>
<li>Put the load on your server, not the client.</li>
<li>Don't view caching as a layer on top, but rather as an integrated part of your application.</li>
<li>Set browser caching headers, use CDNs and take a look at Varnish.</li>
<li>Don't load all minified CSS or JS when you only need 10% of it on that page.</li>
</ul>
<p>Lot's of things to think about. This is my personal checklist I try to keep in mind when developing websites, both professionally and in my spare time. Like I said at the beginning of this post, you shouldn't always do everything just because. But you should understand these concepts, and know when it's appropriate to use them. By doing so, you're contributing to the better web.</p> ]]></summary>

        <updated>2017-05-30T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Array objects ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/aray-objects-with-fixed-types"/>

        <id>https://www.stitcher.io/blog/aray-objects-with-fixed-types</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <pre class="language-php"><code class="language-php">abstract class Collection implements \ArrayAccess, \Iterator
{
    private $position;

    private $array = [];

    public function __construct() {
        $this-&gt;position = 0;
    }

    public function current() {
        return $this-&gt;array[$this-&gt;position];
    }

    public function offsetGet($offset) {
        return isset($this-&gt;array[$offset]) ? $this-&gt;array[$offset] : null;
    }

    public function offsetSet($offset, $value) {
        if (is_null($offset)) {
            $this-&gt;array[] = $value;
        } else {
            $this-&gt;array[$offset] = $value;
        }
    }

    public function offsetExists($offset) {
        return isset($this-&gt;array[$offset]);
    }

    public function offsetUnset($offset) {
        unset($this-&gt;array[$offset]);
    }

    public function next() {
        ++$this-&gt;position;
    }

    public function key() {
        return $this-&gt;position;
    }

    public function valid() {
        return isset($this-&gt;array[$this-&gt;position]);
    }

    public function rewind() {
        $this-&gt;position = 0;
    }
}</code></pre>
<p>A concrete implementation of the <code>Collection</code> class.</p>
<pre class="language-php"><code class="language-php">class TypeCollection extends Collection 
{
    public function offsetSet($offset, $value) {
        if (!$value instanceof Type) {
            throw new \InvalidArgumentException("Value must be of type `Type`.");
        }

        parent::offsetSet($offset, $value);
    }

    public function offsetGet($offset): ?Type {
        return parent::offsetGet($offset);
    }

    public function current(): Type {
        return parent::current();
    }
}</code></pre>
<p>Using the <code>TypeCollection</code> can be done like this.</p>
<pre class="language-php"><code class="language-php">$collection = new TypeCollection();
$collection[] = new Type();

foreach ($collection as $item) {
    var_dump($item);
}</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-05-25T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Stitcher beta 1 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/stitcher-beta-1"/>

        <id>https://www.stitcher.io/blog/stitcher-beta-1</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>The first beta release of Stitcher has arrived. Together with a lot of bugfixes, the website has been given some more love.</p>
<h3>Installation</h3>
<p>The installation package, <code>pageon/stitcher</code>, now loads the beta version by default. If you're running an existing project, your should also require the beta version now: </p>
<pre><code>composer require pageon/stitcher-core @beta</code></pre>
<h3>Changelog</h3>
<ul>
<li>Add empty array fallback in <code>FilterAdapter</code> to prevent undefined index error.</li>
<li>Improved plugin initialisation support. The temporary <code>init</code> function isn't required anymore, the constructor can now be used.</li>
<li>Make the adapter factory extensible.</li>
<li>Improve the CollectionAdapter by adding the <code>browse</code> variable. This variable can be used to browse the detail pages.
It has a <code>next</code> and <code>prev</code> key which contains the next and previous entry, if there are any.</li>
<li>Moved <code>Brendt\Stitcher\SiteParser</code> to <code>Brendt\Stitcher\Parser\Site\SiteParser</code> and refactored its service definition.</li>
<li>Added <code>Brendt\Stitcher\Parser\Site\PageParser</code> to parse a single page, which is no longer the responsibility of <code>SiteParser</code>.</li>
<li>Bugfix for general meta configuration overriding other meta values.</li>
</ul><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-05-20T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ PHP Generics and why we need them ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/php-generics-and-why-we-need-them"/>

        <id>https://www.stitcher.io/blog/php-generics-and-why-we-need-them</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>In today's blog post we'll explore some common problems with arrays in PHP. All the problems and issues listed could be solved with a pending RFC which adds generics to PHP. We won't explore in too much detail what generics are. But at the end of this read you should have a good idea as to why they are useful, and why we really want them in PHP. So without further ado, lets dive into the subject.</p>
<hr />
<p>Imagine you have a collection of blog posts, loaded from a data source.</p>
<pre class="language-php"><code class="language-php">$posts = $blogModel-&gt;find();</code></pre>
<p>Now you want to loop over every post, and do <em>something</em> with its data; lets say, the <code>id</code>.</p>
<pre class="language-php"><code class="language-php">foreach ($posts as $post) {
    $id = $post-&gt;getId();

    // Do something
}</code></pre>
<p>This is a scenario that happens often.
And it's this scenario we'll explore to discuss why generics are awesome,
and why the PHP community desperately needs them.</p>
<p>Lets take a look at the problems of the above approach.</p>
<h3>Data integrity</h3>
<p>In PHP, an array is a collection of.. things.</p>
<pre class="language-php"><code class="language-php">$posts = [
    'foo',
    null,
    self::BAR,
    new Post('Lorem'),
];</code></pre>
<p>Looping over this set of posts would result in a fatal error.</p>
<pre><code>PHP Fatal error:  Uncaught Error: Call to a member function getId() on string</code></pre>
<p>We're calling <code>-&gt;getId()</code> on the string <code>'foo'</code>. Not done. When looping over an array, we want to be sure that
every value is of a certain type. We could do something like this.</p>
<pre class="language-php"><code class="language-php">foreach ($posts as $post) {
    if (!$post instanceof Post) {
        continue;
    }

    $id = $post-&gt;getId();

    // Do something
}</code></pre>
<p>This would work, but if you've written some production PHP code, you know these checks can grow quickly, and pollute
the codebase. In our example, we could verify the type of each entry in the <code>-&gt;find()</code> method on <code>$blogModel</code>.
However, that's just moving the problem from one place to another. It's a bit better though.</p>
<p>There's another problem with data integrity. Say you have a method which requires an array of <code>Posts</code>.</p>
<pre class="language-php"><code class="language-php">function handlePosts(array $posts) {
    foreach ($posts as $post) {
        // ...
    }
}</code></pre>
<p>Again, we could add extra checks in this loop, but we could not guarantee that <code>$posts</code> only holds a collection of <code>Posts</code>.</p>
<p><a href='http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list' target='_blank' rel='noreferrer noopener'>As of PHP 7.0</a>, you could use the <code>...</code> operator
to work around this issue.</p>
<pre class="language-php"><code class="language-php">function handlePosts(Post ...$posts) {
    foreach ($posts as $post) {
        // ...
    }
}</code></pre>
<p>But the downside of this approach: you would have to call the function with an unpacked array.</p>
<pre class="language-php"><code class="language-php">handlePosts(...$posts);</code></pre>
<h3>Performance</h3>
<p>You can imagine it's better to know beforehand whether an array contains only elements of a certain type, rather then
manually checking the types within a loop, every, single, time.</p>
<p>We can't do benchmarks on generics, because they don't exist yet, so its only guessing as to how they would impact performance.
It's not insane to assume though, that PHP's optimised behaviour, written in C; is a better way to solve the problem than
to write lots of userland code.</p>
<h3>Code completion</h3>
<p>I don't know about you, but I use an IDE when writing PHP code. Code completion increases productivity immensely, so I'd also
like to use it here. When looping over posts, we want our IDE to know each <code>$post</code> is an instance of <code>Post</code>. Lets take
a look at the plain PHP implementation.</p>
<pre class="language-php"><code class="language-php"># BlogModel

public function find() : array {
    // return ...
}</code></pre>
<p>As of PHP 7.0, return types were added, and in PHP 7.1 they were refined with nullables and void. But there's no way
our IDE can know what's in the array. So we're falling back to PHPDoc.</p>
<pre class="language-php"><code class="language-php">/**
 * @return Post[]
 */
public function find() : array {
    // return ...
}</code></pre>
<p>When using a &quot;generic&quot; implementation of eg. a model class, type hinting the <code>-&gt;find()</code> method might not be possible.
So we're stuck with type hinting the <code>$posts</code> variable, in our code.</p>
<pre class="language-php"><code class="language-php">/** @var Blog[] $posts */
$posts = $blogModel-&gt;find();</code></pre>
<p>Both the uncertainty of what's exactly in an array, the performance and maintenance impact because of scattered code,
and the inconvenience when writing those extra checks, makes me long for a better solution. </p>
<hr />
<p>That solution, in my opinion is <a href='https://wiki.php.net/rfc/generics' target='_blank' rel='noreferrer noopener'>generics</a>. I won't explain in detail what generics
do, you can read the RFC to know that. But I will give you an example of how generics could solve these issues, guaranteeing
the developer would always have the correct data in a collection.</p>
<p>Big <strong>note</strong>: generics do not exist in PHP, yet. The RFC targeted PHP 7.1, and has no further information about the
future. The following code is based on the <a href='http://php.net/manual/en/class.iterator.php' target='_blank' rel='noreferrer noopener'>the Iterator interface</a>
and <a href='http://php.net/manual/en/class.arrayaccess.php' target='_blank' rel='noreferrer noopener'>the ArrayAccess interface</a>, which both exist as of PHP 5.0.
At the end, we'll dive into a generics example, which is dummy code.</p>
<p>First we'll create a <code>Collection</code> class which works in PHP 5.0+. This class implements <code>Iterator</code> to be able to
loop over its items, and <code>ArrayAccess</code> to be able to use array-like syntax to add and access items in the
collection.</p>
<pre class="language-php"><code class="language-php">class Collection implements Iterator, ArrayAccess
{
    private $position;

    private $array = [];

    public function __construct() {
        $this-&gt;position = 0;
    }

    public function current() {
        return $this-&gt;array[$this-&gt;position];
    }

    public function next() {
        ++$this-&gt;position;
    }

    public function key() {
        return $this-&gt;position;
    }

    public function valid() {
        return isset($this-&gt;array[$this-&gt;position]);
    }

    public function rewind() {
        $this-&gt;position = 0;
    }

    public function offsetExists($offset) {
        return isset($this-&gt;array[$offset]);
    }

    public function offsetGet($offset) {
        return isset($this-&gt;array[$offset]) ? $this-&gt;array[$offset] : null;
    }

    public function offsetSet($offset, $value) {
        if (is_null($offset)) {
            $this-&gt;array[] = $value;
        } else {
            $this-&gt;array[$offset] = $value;
        }
    }

    public function offsetUnset($offset) {
        unset($this-&gt;array[$offset]);
    }
}</code></pre>
<p>Now we can use the class like this.</p>
<pre class="language-php"><code class="language-php">$collection = new Collection();
$collection[] = new Post(1);

foreach ($collection as $item) {
    echo "{$item-&gt;getId()}\n";
}</code></pre>
<p>Note that again, there's no guarantee that <code>$collection</code> only holds <code>Posts</code>. Adding eg. a string would work fine, but
would break our loop.</p>
<pre class="language-php"><code class="language-php">$collection[] = 'abc';

foreach ($collection as $item) {
    // This fails
    echo "{$item-&gt;getId()}\n";
}</code></pre>
<p>With PHP as it is now, we could fix this problem by creating a <code>PostCollection</code> class. Note that I'm using nullable
return types, only available as of PHP 7.1.</p>
<pre class="language-php"><code class="language-php">class PostCollection extends Collection
{
    public function current() : ?Post {
        return parent::current();
    }

    public function offsetGet($offset) : ?Post {
        return parent::offsetGet($offset);
    }

    public function offsetSet($offset, $value) {
        if (!$value instanceof Post) {
            throw new InvalidArgumentException("value must be instance of Post.");
        }

        parent::offsetSet($offset, $value);
    }
}</code></pre>
<p>Now only <code>Posts</code> can be added to our collection.</p>
<pre class="language-php"><code class="language-php">$collection = new PostCollection();
$collection[] = new Post(1);

// This would throw the InvalidArgumentException.
$collection[] = 'abc';

foreach ($collection as $item) {
    echo "{$item-&gt;getId()}\n";
}</code></pre>
<p>It works! Even without generics! There's only one issue, you might be able to guess it. This is not scalable. You need a
separate implementation for every type of collection, even though the only difference between those classes would be the
type.</p>
<p>You could probably make the subclasses even more convenient to create, by &quot;abusing&quot;
<a href="http://php.net/manual/en/language.oop5.late-static-bindings.php">late static binding</a> and PHP's reflection API. But
you'd still need to create a class, for every type available.</p>
<h3>Glorious generics</h3>
<p>With all that in mind, lets just take a look at the code we would be able to write if generics were implemented in PHP.
This would be <strong>one class</strong> which could be used for every type. For your convenience, I'll only be writing the changes
compared to the previous <code>Collection</code> class, so keep that in mind.</p>
<pre class="language-php"><code class="language-php">class GenericCollection&lt;T&gt; implements Iterator, ArrayAccess
{
    public function current() : ?T {
        return $this-&gt;array[$this-&gt;position];
    }

    public function offsetGet($offset) : ?T {
        return isset($this-&gt;array[$offset]) ? $this-&gt;array[$offset] : null;
    }

    public function offsetSet($offset, $value) {
        if (!$value instanceof T) {
            throw new InvalidArgumentException("value must be instance of {T}.");
        }

        if (is_null($offset)) {
            $this-&gt;array[] = $value;
        } else {
            $this-&gt;array[$offset] = $value;
        }
    }

    // public function __construct() ...
    // public function next() ...
    // public function key() ...
    // public function valid() ...
    // public function rewind() ...
    // public function offsetExists($offset) ...
}</code></pre>
<pre class="language-php"><code class="language-php">$collection = new GenericCollection&lt;Post&gt;();
$collection[] = new Post(1);

// This would throw the InvalidArgumentException.
$collection[] = 'abc';

foreach ($collection as $item) {
    echo "{$item-&gt;getId()}\n";
}</code></pre>
<p>And that's it! We're using <code>&lt;T&gt;</code> as a dynamic type, which can be checked before runtime. And again, the <code>GenericCollection</code>
class would be usable for every type, always.</p>
<p>If you're as excited as me for generics (and this is only the tip of the iceberg by the way), you should spread the word
in the PHP community, and share the RFC: <a href='https://wiki.php.net/rfc/generics' target='_blank' rel='noreferrer noopener'>https://wiki.php.net/rfc/generics</a></p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-05-17T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Stitcher alpha 5 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/stitcher-alpha-5"/>

        <id>https://www.stitcher.io/blog/stitcher-alpha-5</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>This is the last alpha version of Stitcher. The next release will be beta for the first time, and only bugfixes and improvements will be added from now on. Alpha 5 adds the last important pieces for Stitcher to be feature-complete before a stable 1.0 release. The most important things to note are the plugin support, improved command feedbacked and the internal use of the service container.</p>
<p>You can read about the upcoming plugin support in <a href="/blog/simplest-plugin-support">this blogpost</a>. Furthermore, I'm already working on the first plugin to support a REST api. Next step is a web interface to manage your content. For developers, Stitcher 1.0 will of course be completely useable without any plugins.</p>
<p>Its important to note that this update has <strong>a breaking change</strong> which existing Stitcher projects should take into account.</p>
<h3>Installation</h3>
<pre class="language-php"><code class="language-php">composer require pageon/stitcher-core 1.0.0-alpha5</code></pre>
<h3>Update - breaking changes</h3>
<p>A last big refactor has been done to support more extensions in the future. This means both the <code>Console</code> and the <code>DevController</code>
now live in a different namespace. You'll need an updated version of <code>stitcher</code> and <code>index.php</code>. This can be done with the
following commands.</p>
<pre><code>rm ./stitcher
rm ./dev/index.php
cp vendor/pageon/stitcher-core/install/stitcher ./stitcher
cp vendor/pageon/stitcher-core/install/dev/index.php ./dev/index.php

# Remove the cache dir, this might be another directory depending on your configuration.
rm -r .cache/</code></pre>
<h3>Changelog</h3>
<ul>
<li>Add plugin support!</li>
<li>Add PHP 7.0 support.</li>
<li>Add Command tests for Router commands and Generate command.</li>
<li>Improved meta support.</li>
<li>Improved generate command feedback.</li>
<li>Refactor the use of the dependency container, enabling future extensions. (See breaking changes).</li>
<li>Use stable version of <code>pageon/html-meta</code>.</li>
<li>Fix folder parser bug with nested folders.</li>
<li>Fix with Sass compiler import paths. The Sass compiler can now also look directly in <code>src/css</code>. This is useful when doing includes and IDE auto-completion.</li>
<li>Fix global meta tags not being loaded.</li>
<li>Fix for meta tags on detail pages not correctly set. </li>
</ul><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-05-01T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ The simplest plugin support ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/simplest-plugin-support"/>

        <id>https://www.stitcher.io/blog/simplest-plugin-support</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p><em>Stitcher's plugin support is available as of <a href="/blog/stitcher-alpha-5">stitcher 1.0.0-alpha5</a>.</em></p>
<p>In this post, you'll read about Stitcher's plugin system. It might get a bit technical, but is definitely worth the read.</p>
<p>Stitcher plugins are built on top of two powerful components, which already exist in many modern projects.</p>
<ul>
<li>Composer's auto loading</li>
<li>Symfony's service container</li>
</ul>
<p>Using these two components, a plugin is no more than a composer package, telling Stitcher it should add its own classes and parameters to the existing services. It's a wonderfully simple concept, and it works like a charm. Like almost everything in Stitcher: the simpler, the better. Let's take a look at an example.</p>
<h3>MyPlugin</h3>
<p>This is what a plugin's folder structure could look like.</p>
<pre><code>MyPlugin/
    ├── src/
    │   ├── My/
    │   │    ├── MyPlugin.php
    │   │    └── Service.php
    ├── config.yml
    ├── services.yml
    ├── composer.json
    └── README.md</code></pre>
<p>The only requirement for a package to be &quot;a plugin&quot; is a class implementing the <code>Brendt\Stitcher\Plugin\Plugin</code> interface. In this example, that would be <code>My\MyPlugin</code>. When this class can be auto loaded with composer, your plugin is ready!</p>
<h3>Plugin interface</h3>
<p>The <code>Plugin</code> interface requires you to only implement three methods. These methods tell Stitcher where the <code>services.yml</code> and <code>config.yml</code> files are located and how to intialise the plugin. Any other binding with Stitcher is done via the service container.</p>
<pre class="language-php"><code class="language-php">namespace My;

use Brendt\Stitcher\Plugin\Plugin;

class MyPlugin implements Plugin
{
    public function init() {
        return;
    }

    public function getConfigPath() {
        return __DIR__ . '/plugin.config.yml';
    }

    public function getServicesPath() {
        return __DIR__ . '/plugin.services.yml';
    }
}</code></pre>
<h3><code>init</code> method</h3>
<p>The <code>init</code> method is called after all plugin config is loaded. This method can be used as a hook to add plugin configuration to existing services. An example would be adding a command to the console application.</p>
<pre class="language-php"><code class="language-php">/**
 * @return void
 */
public function init() {
    /** @var Console $console */
    $console = App::get('app.console');

    $console-&gt;add(App::get('my.plugin.command.my.cmd'));
}</code></pre>
<h3>plugin.config.yml</h3>
<p>The name doesn't matter as long as its a yaml file. This file works exactly the same as other config files: key-value pairs can be added and will be available as parameters in the service container. Keys can be nested, but will be flattened when loaded. One thing to note is that plugins cannot override existing parameters.</p>
<p>Your plugin parameters can of course be overridden from within a Stitcher project.</p>
<pre class="language-yaml"><code class="language-yaml"># ./vendor/MyPlugin/plugin.services.yml

my.plugin:
    parameter: test</code></pre>
<h3>plugin.services.yml</h3>
<p>Again, the name doesn't matter, but the root element must be named <code>services</code> as per Symfony's requirements. You could also add <code>parameters</code> here.</p>
<pre class="language-yaml"><code class="language-yaml"># ./vendor/MyPlugin/plugin.services.yml

services:
    my.plugin.my.service:
        class: My\Service
        arguments: ['%my.plugin.parameter%', '%directories.src%', '@stitcher']</code></pre>
<p>As you can see, Stitcher services and parameters are available, as well as your own.</p>
<h3>Loading a plugin</h3>
<p>Finally, a plugin must be loaded into your project for it to be active. The <code>plugins</code> parameter in your project's config file is used for doing that.</p>
<pre class="language-yaml"><code class="language-yaml"># ./config.yml

plugins:
    - My\MyPlugin</code></pre>
<p>That's it!</p>
<h2>Future possibilities</h2>
<p>This plugin system is so simple, yet it opens the possibility to add all kinds of functionality to a Stitcher project. It's an important step towards some of my own ideas; custom themes and other applications (API and CMS); and we'll discover more of its true strength in the future.</p>
<p>The most important thing for me is its simplicity. When looking at plugin systems in other applications, you'll often find complex setups like a virtual directory structure, a custom plugin loader, dirty file naming conventions, own package managers, etc. I wanted to use existing and proven technologies to build on top on, and keep the system as clean as possible. I believe this approach is a step towards the right direction.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-04-27T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Stitcher alpha 4 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/stitcher-alpha-4"/>

        <id>https://www.stitcher.io/blog/stitcher-alpha-4</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>A new alpha release has arrived for Stitcher!</p>
<p>This release brings a lot of optimizations and bugfixes to many parts of Stitcher. The biggest changes are found in <code>brendt/responsive-images</code>, in which a lot of bugfixes and extra options are added. Furthermore, there's one change reverted, namely the asynchronous support for image rendering. This functionality relied on several <code>amphp</code> development packages, and broke with almost every update. Async support might be readded in the future, but for now its disabled.</p>
<p>One of the biggest new features is the support for custom htaccess headers and with that, HTTP2 server push! This feature has been added and is tested, but not yet used in any real projects. So there's more testing to do before declaring it &quot;stable&quot;. You can use it in almost any template function by added the <code>push=true</code> parameter.</p>
<p>Stitcher also uses <code>papgeon/html-meta</code> now, and will build on top of this library more and more in the future.</p>
<p>One final new feature is the addition of the <code>cdn</code> config parameter. This parameter takes an array of files, located in the source directory, and will copy them on-the-fly or during compile-time to the public directory. This way you can expose folders or files directly, without parsing them through Stitcher.</p>
<h3>Installation</h3>
<p>The installation package, <code>pageon/stitcher</code>, still comes with <code>1.0.0-alpha3</code> by default. Feel free to manually update the composer requirement to <code>1.0.0-alpha4</code>. The default version will change as soon as HTTP/2 server push is fully tested.</p>
<p>Some people might need to run <code>composer dump-autoload -o</code> one more time when updating to alpha4.</p>
<h3>Future updates</h3>
<p>Before this update, Stitcher was always re-tagged on the fly when new things were added. From now on, tags will only be added after a certain feature set is complete. By doing so, updating Stitcher won't break things as much as it used to do. Keep in mind Stitcher is still in alpha phase, so breaking changes will happen now and then. There's still a small feature set to be added before a first beta release will be available. Slowly but surely, we're getting there.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-04-21T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Static site generators vs. caching ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/static_sites_vs_caching"/>

        <id>https://www.stitcher.io/blog/static_sites_vs_caching</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>What's the difference between static site generators and caching you ask? </p>
<p>A short answer might be: there is no technical benefit between both. But the mindset behind the two is completely different.</p>
<p>I think the topic is too interesting to leave it like that. Let's talk about caching.</p>
<p>For many years now, we've been creating systems which help us build websites. Many of those systems are built around the idea of &quot;dynamic websites&quot;. Instead of writing HTML and CSS pages; we've designed systems which can load information from a data source (say for example, a MySQL database); parse that data into so called &quot;templates&quot; (these are like blueprints for HTML pages); and finally send the rendered HTML to the client. Of course, there is more than just HTML and CSS to a website, but that's a topic for another day.</p>
<p>Now imagine you've got many visitors on your website, each of them visiting the same page. Rendering that page for every visit would require more server resources than to render the page once, and send that output to everyone asking it. That's a cached page. You could also cache other parts of the application. For example: not always perform the same database query, but rather cache the result of that query and reuse that over and over again.</p>
<p>Evidently, caching is way more than what I just described. My try at a general definition for caching on the web would be something like this.</p>
<blockquote>
<p>Once a resource instensive operation is done, remember the outcome. The next time the same operation is requested, you can just give the result instead of doing that operation again.</p>
</blockquote>
<p>Caching is a very powerful tool which <strong>wraps around</strong> your system, enabling it to be much more performant.</p>
<p>Stitcher, and all static site generators, are the opposite. These tools don't <em>wrap around</em> a system. Rather, their core <strong>is</strong> the HTML ouput. All other things needed by developers to smoothly build websites, are <strong>plugged in</strong> into that core. What's the downside? You'll have to re-render parts of your website before they are visible to the visitor. A tedious task. Luckily computers are good at performing the same tedious tasks over and over again. Re-rendering your website isn't really a bother when you have the right tools available.</p>
<p>Another &quot;downside&quot; of static websites? It requires a bit more thought of the developer. But when could that a bad thing?</p>
<p>So static websites do have their downsides. But take a look at the things you're able to &quot;plug in&quot; that HTML rendering core:</p>
<ul>
<li><a href="/blog/tackling_responsive_images-part_1">Image optimisation</a>: enabling the developer to use the responsive images specification to its full extent, without any work.</li>
<li>SASS precompiling: I'm not a frontend developer, but these guys tell me that's a must.</li>
<li>Pagination, overviews and detail pages.</li>
<li>Parse MarkDown, YAML and JSON into templates and use those templates like in any dynamic system.</li>
<li>JavaScript and CSS minifying: very important for website performance.</li>
<li>Things like ordering and filtering data sets.</li>
</ul>
<p>Some important things are still missing in Stitcher though.</p>
<ul>
<li>Form support: although Stitcher will not include form handling at its core. That will be a separate module.</li>
<li>Frontend filtering of data sets: technically this is possible, but it might have huge performance costs depending on the amount of filters. I will be working on it in the future though.</li>
<li>Content management: this is also possible, but not from within Stitcher's core. It would be a separate module acting as a client to modify a Stitcher project.</li>
</ul>
<p>To be clear: I don't think static site generators are the best solution for all websites. But there are lots of cases which could benifit from using a static site generator over of a dynamic system and caching. I view many caching systems as like putting a bandaid on top of a wound, but not <em>stitching</em> the wound (pun intended). Don't forget that clearing caches is one of the most difficult parts of software development. But we should also be realistic: the static website approach mainly targets small to medium websites, not complex web applications.</p>
<p>So if you want to give it a go, be sure to check out a static site generator, there are many!</p>
<ul>
<li><a href="https://jekyllrb.com/">Jekyll</a></li>
<li><a href="http://gohugo.io/">Hugo</a></li>
<li><a href="/guide">Stitcher</a></li>
<li><a href="https://sculpin.io/">Sculpin</a></li>
</ul><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-03-02T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Image optimizers ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/image_optimizers"/>

        <id>https://www.stitcher.io/blog/image_optimizers</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>I've been working lately on image optimisation in Stitcher. As a try-out, I've added <a href="https://github.com/psliwa/image-optimizer">this library</a> to the responsive images module. </p>
<p>Enabling the optimizer is done by updating Stitcher (1.0.0-alpha2), and adding the following parameter in <code>config.yml</code>.</p>
<pre class="language-yaml"><code class="language-yaml">engines:
    optimizer: true</code></pre><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-02-26T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Tackling responsive images - part 2 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/tackling_responsive_images-part_2"/>

        <id>https://www.stitcher.io/blog/tackling_responsive_images-part_2</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>In my <a href="/blog/tackling_responsive_images-part_1">previous post</a>, I wrote about the idea behind integrating responsive images and Stitcher. A pretty robust library came to be. You could throw it any image, and it would generate a set of variations of that images, scaled down for multiple devices. It returned an object, which Stitcher parsed into a template variable. In templates, the following is now possible.</p>
<pre class="language-html"><code class="language-html">&lt;img src="{$image.src}" srcset="{$image.srcset}" sizes="{$image.sizes}" /&gt;</code></pre>
<p>If you would like to read the source code instead of this post, <a href="https://github.com/brendt/responsive-images">here you go</a>.</p>
<p>Like I wrote earlier, the first version of the scaling down algorithm was based on the width of images. It worked, but it wasn't solving the actual problem: optimizing bandwidth usage. The real solution was in downscaling images based on their filesizes. The problem there: how could you know the dimensions of an image, when you know the desired filesize. This is where high school maths came into play. I was actually surprised how much fun I had figuring out this &quot;forumla&quot;. I haven't been in school for a few years, and I was rather happy I could use some basic maths skills again!</p>
<p>This is what I did:</p>
<pre><code>filesize = 1.000.000
width = 1920
ratio = 9 / 16
height = ratio * width

area = width * height
 &lt;=&gt; area = width * width * ratio

pixelprice = filesize / area
 &lt;=&gt; filesize = pixelprice * area
 &lt;=&gt; filesize = pixelprice * (width * width * ratio)
 &lt;=&gt; width * width * ratio = filesize / pixelprice
 &lt;=&gt; width ^ 2 = (filesize / pixelprice) / ratio
 &lt;=&gt; width = sqrt((filesize / pixelprice) / ratio)</code></pre>
<p>So given a constant <code>pixelprice</code>, I can calculate the required width an image needs to have a specified filesize. Here's the thing though. <code>pixelprice</code> is an approximation of what one pixel in this image costs. That's because not all pixels are worth the same amount of bytes. It heavily depends on which image codecs are used. It is however the best I could do for now, I might add some more logic in the future, but I'd like to try this algorithm out for a while. </p>
<p>So now the Responsive Factory scales down images by filesize instead of width. A much better metric when you're trying to reduce bandwidth usage. This is how the library is used in Stitcher:</p>
<pre class="language-php"><code class="language-php">use Brendt\Image\Config\DefaultConfigurator;
use Brendt\Image\ResponsiveFactory;

$config = new DefaultConfigurator([
    'driver'      =&gt; Config::get('engines.image'),
    'publicPath'  =&gt; Config::get('directories.public'),
    'sourcePath'  =&gt; Config::get('directories.src'),
    'enableCache' =&gt; Config::get('caches.image'),
]);

$responsiveFactory = new ResponsiveFactory($config);</code></pre>
<p>All images in Stitcher go through this factory, the factory will generate x-amount of variations of the image, and the browser decides which one it will download. Its pretty cool, and I hope it will help websites to serve more optimized images, while a developer can still focus on the most important parts of his project.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-02-18T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Tackling responsive images - part 1 ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/tackling_responsive_images-part_1"/>

        <id>https://www.stitcher.io/blog/tackling_responsive_images-part_1</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>One of the main goals when I started with Stitcher was heavily optimized images. Looking at the <a href="http://httparchive.org/trends.php">HTTP Archive</a> stats, it's clear we're doing something wrong. Luckily, the <a href="http://responsiveimages.org/">Responsive images spec</a> has been made by a lot of smart people to counter the image problem. My goal was to implement this spec in Stitcher in a way that was easy enough for developers to use it to its full extent. We're not completely there yet, but we're close. In this blogpost I want to talk about the challenges I faced creating this library. And if you're more into code then into reading a blog post, <a href="https://github.com/brendt/responsive-images">here you go</a>.</p>
<p>To be clear: the goal of the responsive images spec is to reduce bandwith used when downloading images. Images nowadays require so much bandwith. When you think about it, it's insane to load an image which is 2000 pixels wide, when your the image on screen is only 500 pixels wide. That's the issue the spec addresses, and that's the issue I wanted to solve in Stitcher.</p>
<p>So I want one image to go in, x-amount of the same image with varying sizes coming out, and let the browser decide which image is the best to load. How could I downscale that source image? That was the most important question I wanted answered. All other problems like accessebility in templates and how to expose the generated image files, were concerns of Stitcher itself.</p>
<p>My first take on downscaling images was the following:</p>
<p>Take the source image and a set of configuration parameters. These parameters would decide the maximum amount of image variantions and the minimum width of the image. Eg. I want a maximum of ten images, with the smallest image being 300 pixels wide. Now the algorithm would loop a maximum of 10 times, always creating an image which is 10% smaller in width than the previous one.</p>
<p>You might already see this is not the optimal approach. After all: we're trying to reduce bandwith used when loading images. There is no guarantee an image which is downscaled 10%, is also reduced in size. Much depends on which image codecs are used, and what's in the image itself. But by using this approach early on, I was able to implement this &quot;image factory&quot; with Stitcher. Next I would be working on optimizing the algorithm, but for the time being I could tackle the Stitcher integration.</p>
<h2>Linking with Stitcher</h2>
<p>Letting Stitcher know about responsive images was both easy and difficult at the same time. The basic framework was already there. So I could easily create an image provider which used the responsive factory, and returned an array representation of the image. The template syntax looks like this:</p>
<pre class="language-html"><code class="language-html">&lt;img src="{$image.src}" srcset="{$image.srcset}" sizes="{$image.sizes}" /&gt;</code></pre>
<p>Unfortunately, there is no way to automate the sizes part, unless you start crawling all CSS and basically implement a browser engine in PHP. My solution for this part is pre-defined sets of sizes. That's still a work in progress though, I'm not sure yet how to make it easy enough to use. For now, I'm just manually specifying sizes when writing template code.</p>
<p>But the tricky part wasn't the sizes, neither the srcset. It was handling paths and URLs. I've noticed this throughout the whole Stitcher framework: creating the right paths and URLs (correct amount of slashes, correct root directory etc.) is actually quite the pain to manage. I'm convinced by now I need some kind of helper which always renders the correct paths and URLs. It's on my todo list.</p>
<p>That's it for this blogpost, next up I'll be writing about optimizing the image algorithm.</p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
 ]]></summary>

        <updated>2017-02-17T00:00:00+00:00</updated>
    </entry>
        <entry>
        <title><![CDATA[ Which editor to choose? ]]></title>

        <link rel="alternate" href="https://stitcher.io/blog/which-editor-to-choose"/>

        <id>https://www.stitcher.io/blog/which-editor-to-choose</id>

        <author>
            <name><![CDATA[ Brent Roose ]]></name>
        </author>

        <summary type="html"><![CDATA[ <p>So many editors to choose from! Which one is the best for you?
I can already tell you that you won’t find the answer here. But maybe I can list some pros and cons.
We’ll be looking at Sublime Text, Github’s Atom, Adobe’s Brackets and Microsoft’s Visual Studio Code.
All of these editors are based on the same core concepts, some of which Sublime made extremely popular.
But there are some big and subtle differences.</p>
<h2>Out of the box features</h2>
<p>All four editors are multi platform, have the command palette and fuzzy finder we’ve grown accustomed to.
It’s important to keep in mind that Sublime and Atom are primarily focussed on packages to provide functionality,
while Brackets and Visual Studio Code provide a more all-in-one solution from the start.
More about packages later, here are the most important differences out of the box.</p>
<p><strong>Visual Studio Code</strong> comes with built-in GIT support, a task runner and a linter.
You can start to code without having to set up anything.
It’s focussed on Node and ASP.NET development, which is reflected in the tools provided.
But you can use it for any other language.</p>
<p><strong>Sublime Text</strong> provides a lot of themes from the start,
has a built in project manager and offers many customisable keybindings and commands to do text manipulation.
There are however a lot of packages you’ll want to download immediately.</p>
<p><strong>Atom</strong> has a package manager shipped by default.
Atom’s file tree sidebar has some very nice features such as GIT support and file manipulation (see below).
There’s also a live MarkDown editor which is really neat.
But like Sublime, you’ll want to install extra packages from the start.</p>
<p><strong>Brackets</strong> has an awesome live preview feature which just blew my mind.
Brackets is focussed on front-end web development and provides very good tools to do so.
It also comes with a linter, debugger, inline editor and Photoshop integration.
There’s an extension manager available too. (That’s the Adobe version of packages, more about those later).</p>
<p>I felt Visual Studio Code and Brackets were really just plug-and-play from the start.
Both Sublime and Atom require a lot of tweaking to set everything up for the best coding experience.
This isn’t a bad thing, but in this category, Visual Studio Code and Brackets are the best.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/1.png" class="editor-badge"/>
</p>
<hr />
<h2>Packages</h2>
<p>Packages (or extensions, thanks Adobe), give you access to a lot of extra features.</p>
<p><strong>Brackets</strong> has an extension manager which is rather slow and bulky and has an “Adobe feel” to it.
You can easily install packages from a local source, URL or an online repository.
The extension manager lacks however good package documentation.</p>
<p>In <strong>Sublime</strong>, you’ll need Package Control if you want to easily install other packages.
There’s a very wide variety of packages available there.
Chances are that you’ll be able to do that one thing you like with an existing package.
Browsing packages is a bit of a pain from the command palette though.
There are many small undocumented packages which makes it often a guess as to what a package really does.
The online documentation isn’t user friendly either. It’s mostly a huge pile of text per package.</p>
<p><strong>Atom</strong> shines when it comes to packages. It has a built-in package manager which works directly with GitHub.
Not only are there a lot of packages available, there’s also a very high standard on documentation.
You’ll be able to see screenshots, keybinding references and even animated GIFs explaining how a package works and what it does.
All from within Atom. It’s super easy to update packages and Atom will tell you when a package is outdated or uses deprecated code.
It shouldn’t surprise you that Atom itself is actually a collection of these same packages.</p>
<p><strong>Visual Studio Code</strong> as of VSC V0.10.1 there’s extension support, which looks a lot like Sublime’s Package Control.
Because of the recent popularity of Visual Studio Code, there's a big plugin system rising.</p>
<p>Atom is a winner when it comes to packages.
The whole system is built upon the package manager, and there’s a big community behind it.
That should be no surprise, knowing that GitHub is creating this editor.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/2.png" class="editor-badge"/>
</p>
<hr />
<h2>File tree</h2>
<p>You might find it odd I list the file tree as a category.
From experience though, I feel the tree is one of the most important features which can really work with or work against you.
You might not use the file tree at all, but a lot of people do.
So I felt it was right to talk about it here.</p>
<p><strong>Sublime Text</strong> is fast and this is also reflected in the tree.
It lacks however some important functionality related to file manipulation from the tree.</p>
<p><strong>Brackets</strong> has a very bulky and slow tree. Opening folders and files takes a notable time.
It also offers only the bare minimal tools like Sublime:
new files and folders, renaming, deleting and revealing/searching files.</p>
<p><strong>Visual Studio Code</strong> doesn’t have a lot more tools than Brackets or Sublime,
but it allows you to move files inside the tree, which is a big help.
There are some minor points though. Visual Studio Code doesn’t show tabs, but uses the tree pane to show open files.
It makes this pane become cluttered and makes it difficult to find the open file you’re looking for.
It’s also not possible to scroll sideways.
But you can use the same pane as a search and debugger view, which is space efficient.</p>
<p><strong>Atom</strong> has a lot of tree functionality: there are simple tools like copy/paste,
but also cut, duplicate, rename etc.
You can also move files by dragging them.
Atom furthermore integrates GIT project status in the file tree.
The tree might feel a bit slower than Sublime or Visual Studio Code though.</p>
<p>Both Atom and Sublime have great file tree features, and both lack some.
Sublime can’t be beaten by speed, but Atom offers a lot more functionality.
Many people don’t use the tree view in Sublime,
but together with Atom’s GIT status you’ll get a good project overview by just looking at the tree.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/3.png" class="editor-badge"/>
</p>
<hr />
<h2>Performance</h2>
<p>Performance is one of the most important metrics.
All of these editors are performant for sure, but each has its own small differences.</p>
<p><strong>Atom</strong> lacks in this category.
There are two major issues: startup time and big files.
Atom is built upon web technologies (HTML, CSS and JavaScript).
It has some major advantages, but takes a while longer to load.
It’s however only the startup, and still considerably faster than any IDE.
Once everything is loaded, Atom is as fast as Brackets. On the other side, big file loading time is a disaster.
Atom will open files once you’ve selected them in the tree view.
It’s easy to miss click a minified file, which will make Atom hang for several seconds or even minutes. </p>
<p><strong>Visual Studio Code</strong> is a bit faster than Atom and Brackets,
it works as you might expect from a Microsoft product: not slow, but also not the fastest.</p>
<p><strong>Brackets</strong> is comparable to Atom, but the slow and bulky tree view makes everything feel slower.</p>
<p><strong>Sublime</strong> is by far the winner here.
It’s lightning fast all the time, and can’t be beaten by any other editor.
Atom and Brackets loose this competition, but are still a lot faster than full blown IDEs.
Another aspect to keep in mind is the amount of packages you’re using.
Atom actually tells you how much milliseconds each package adds to startup time.
Sublime is also subject to this: the more packages the slower.
But without any doubt: Sublime shines in the field of performance.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/4.png" class="editor-badge"/>
</p>
<hr />
<h2>Configuration</h2>
<p><strong>Sublime</strong>, <strong>Brackets</strong> and <strong>Visual Studio Code</strong> offer an easy JSON config file for settings and keybindings.
Brackets and Visual Studio Code even open a two column layout when editing settings, one with the defaults and one with your own.
A small but convenient feature.</p>
<p><strong>Atom</strong> however excels at customisability with its own stylesheet and startup script which can be hacked in any way you want.
It has a built-in keybinding debugger, the Chrome developer tools, works with CoffeeScript (JS) and CSS.
You don’t need to learn another language to customise Atom, it’s built upon web technologies.
Furthermore, each package has its own configuration page with a lot of documentation and sometimes input fields to set parameters.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/5.png" class="editor-badge"/>
</p>
<hr />
<p><blockquote class="sneaky-placeholder shown">
    <p>
        This is where the ad would go.
        I get it, they are stupid.
        But to be honest, they actually make a difference.
        So maybe you'd consider whitelisting this blog?
    </p>
</blockquote>

<div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block; text-align:center;"
         data-ad-layout="in-article"
         data-ad-format="fluid"
         data-ad-client="ca-pub-7163240497326235"
         data-ad-slot="4184710069">
    </ins>
</div>
</p>
<p>That was a lot of information! Some of the most important things summarized:</p>
<p><strong>Visual Studio Code</strong> is focused on Node and ASP.NET development.
It isn’t very customisable but has the Microsoft IDE feel to it.
It’s an easy plug and play setup.
Files are not shown in tabs, which makes it feel a bit unorganised,
but I think that this is a preference and a developer can get used to this method of work.</p>
<p><strong>Sublime Text</strong> has a lot of power. It’s fast and reliable.
There are a lot of packages to customise your development environment,
but they are often not very well documented. Sublime starts out as a text editor,
but can be made the perfect, performant IDE with time and effort.</p>
<p><strong>Brackets</strong> has some awesome front-end web development features like live previews, linters and PSD integration.
The main downside is that it feels a bit slow, especially the file tree.</p>
<p><strong>Atom</strong> is built on web technologies and its packages.
It’s offers a very nice interface for packages and configuration and is “hackable to the core”.
It has some quirks still with performance, but there’s a very active community working on it.
Its customisability makes Atom accessible for a wide variety of programmers with their own workflow.</p> ]]></summary>

        <updated>2015-08-24T00:00:00+00:00</updated>
    </entry>
    </feed>
